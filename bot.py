import os
import logging
import sqlite3
import asyncio
from datetime import datetime, time as dt_time, timedelta
from typing import Dict, Optional, Any, List

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('BOT_TOKEN')
YOUR_CHAT_ID = os.environ.get('YOUR_CHAT_ID')

if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN")
    exit(1)

if not YOUR_CHAT_ID:
    logger.error("‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YOUR_CHAT_ID")
    exit(1)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
GENDER, FIRST_QUESTION = range(2)

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞
QUESTIONS = [
    "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
    "–ö–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü?",
    "–ü–æ—á–µ–º—É —ç—Ç–∞ —Ü–µ–ª—å –≤–∞–∂–Ω–∞ –¥–ª—è –≤–∞—Å?",
    "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —ç—Ç–æ–π —Ü–µ–ª–∏?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–æ—Ä—è–¥–∫–µ –¥–Ω—è:"
]

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS clients
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  first_name TEXT,
                  last_name TEXT,
                  status TEXT DEFAULT 'active',
                  registration_date TEXT,
                  last_activity TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS questionnaire_answers
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  question_number INTEGER,
                  question_text TEXT,
                  answer_text TEXT,
                  answer_date TEXT)''')
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

init_db()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def save_user_info(user_id: int, username: str, first_name: str, last_name: Optional[str] = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    c.execute('''INSERT OR REPLACE INTO clients 
                 (user_id, username, first_name, last_name, registration_date, last_activity) 
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (user_id, username, first_name, last_name, registration_date, registration_date))
    conn.commit()
    conn.close()
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    last_activity = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    c.execute('''UPDATE clients SET last_activity = ? WHERE user_id = ?''',
              (last_activity, user_id))
    conn.commit()
    conn.close()

def save_questionnaire_answer(user_id: int, question_number: int, question_text: str, answer_text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    answer_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    c.execute('''INSERT INTO questionnaire_answers 
                 (user_id, question_number, question_text, answer_text, answer_date) 
                 VALUES (?, ?, ?, ?, ?)''',
              (user_id, question_number, question_text, answer_text, answer_date))
    conn.commit()
    conn.close()

def check_user_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    c.execute("SELECT user_id FROM clients WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    save_user_info(user.id, user.username, user.first_name, user.last_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç—É
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM questionnaire_answers WHERE user_id = ?", (user.id,))
    has_answers = c.fetchone()[0] > 0
    conn.close()
    
    if has_answers:
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/plan - –í–∞—à –ø–ª–∞–Ω\n"
            "/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å\n"
            "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
            "/help - –ü–æ–º–æ—â—å"
        )
        return ConversationHandler.END
    else:
        keyboard = [['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
            reply_markup=reply_markup
        )
        
        return GENDER

async def gender_choice(update: Update, context: CallbackContext) -> int:
    """–í—ã–±–æ—Ä –ø–æ–ª–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    gender = update.message.text.replace('üë® ', '').replace('üë© ', '')
    context.user_data['assistant_gender'] = gender
    
    if gender == '–ú—É–∂—Å–∫–æ–π':
        assistant_name = '–ê–Ω—Ç–æ–Ω'
    else:
        assistant_name = '–í–∞–ª–µ—Ä–∏—è'
    
    context.user_data['assistant_name'] = assistant_name
    context.user_data['current_question'] = 0
    context.user_data['answers'] = {}
    
    await update.message.reply_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {assistant_name}. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º!\n\n'
        f'{QUESTIONS[0]}',
        reply_markup=ReplyKeyboardRemove()
    )
    
    return FIRST_QUESTION

async def handle_question(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    user = update.effective_user
    answer_text = update.message.text
    current_question = context.user_data['current_question']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    save_questionnaire_answer(user.id, current_question, QUESTIONS[current_question], answer_text)
    context.user_data['answers'][current_question] = answer_text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['current_question'] += 1
    
    if context.user_data['current_question'] < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[context.user_data['current_question']])
        return FIRST_QUESTION
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É
        return await finish_questionnaire(update, context)

async def finish_questionnaire(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    user = update.effective_user
    assistant_name = context.user_data['assistant_name']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        admin_message = (
            f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üÜî ID: {user.id}\n"
            f"üîó Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
            f"üë®‚Äçüíº –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_name}"
        )
        
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID,
            text=admin_message,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üíå –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")
            ]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    
    await update.message.reply_text(
        "üéâ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n"
        "üìä –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω.\n\n"
        "üí° –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "/plan - –û–±—â–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\n"
        "/progress - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        '–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# ========== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========

async def plan_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"""
    user = update.effective_user
    update_user_activity(user.id)
    
    if not check_user_registered(user.id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    plan_text = (
        "üìã –í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        "üåÖ –£—Ç—Ä–æ (8:00 - 12:00):\n"
        "‚Ä¢ –ó–∞—Ä—è–¥–∫–∞ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–µ–π\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫\n\n"
        "üåû –î–µ–Ω—å (12:00 - 18:00):\n"
        "‚Ä¢ –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö\n"
        "‚Ä¢ –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n"
        "üåô –í–µ—á–µ—Ä (18:00 - 22:00):\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞\n"
        "‚Ä¢ –£–∂–∏–Ω –∏ –æ—Ç–¥—ã—Ö\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
    )
    
    await update.message.reply_text(plan_text)

async def progress_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user = update.effective_user
    update_user_activity(user.id)
    
    if not check_user_registered(user.id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    progress_text = (
        "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: 15/20\n"
        "üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 4/5 –¥–Ω–µ–π\n"
        "üìö –û–±—É—á–µ–Ω–∏–µ: 5/7 —á–∞—Å–æ–≤\n"
        "üí§ –°–æ–Ω: 7.5 —á–∞—Å–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º\n\n"
        "üéØ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
    )
    
    await update.message.reply_text(progress_text)

async def profile_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
    user = update.effective_user
    update_user_activity(user.id)
    
    if not check_user_registered(user.id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üìõ –ò–º—è: {user.first_name}\n"
        f"üÜî ID: {user.id}\n"
        f"üîó Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üíé –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    
    await update.message.reply_text(profile_text)

async def help_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/plan - –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\n"
        "/progress - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!"
    )
    
    await update.message.reply_text(help_text)

# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========

async def send_to_user(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    user_id = context.args[0]
    message = " ".join(context.args[1:])
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n\n{message}"
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def stats_command(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    conn = sqlite3.connect('clients.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM clients")
    total_users = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM questionnaire_answers")
    total_answers = c.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìù –û—Ç–≤–µ—Ç–æ–≤ –≤ –∞–Ω–∫–µ—Ç–∞—Ö: {total_answers}\n"
        f"üü¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
    )
    
    await update.message.reply_text(stats_text)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    update_user_activity(user.id)
    
    if not check_user_registered(user.id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID,
            text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}:\n\n{update.message.text}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üíå –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")
            ]])
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('reply_'):
        user_id = query.data.replace('reply_', '')
        await query.edit_message_text(
            f"üíå –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send {user_id} –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º Application (–≤–∞–∂–Ω–æ - –±–µ–∑ Updater!)
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                GENDER: [MessageHandler(filters.Regex('^(üë® –ú—É–∂—Å–∫–æ–π|üë© –ñ–µ–Ω—Å–∫–∏–π)$'), gender_choice)],
                FIRST_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("plan", plan_command))
        application.add_handler(CommandHandler("progress", progress_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("send", send_to_user))
        application.add_handler(CommandHandler("stats", stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()
