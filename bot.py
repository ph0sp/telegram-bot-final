import logging
from datetime import datetime, time as dt_time
import signal
import sys
import asyncio

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    TOKEN, YOUR_CHAT_ID, GENDER, READY_CONFIRMATION, QUESTIONNAIRE, 
    ADD_PLAN_USER, ADD_PLAN_DATE, ADD_PLAN_CONTENT, logger,
    POSTGRESQL_AVAILABLE, GOOGLE_SHEETS_AVAILABLE
)

# –Ø–í–ù–´–ô –ò–ú–ü–û–†–¢ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ handlers.start
from handlers.start import (
    start, gender_choice, handle_ready_confirmation, 
    handle_question, finish_questionnaire, cancel
)

from handlers.user import (
    plan_command, progress_command, profile_command, 
    points_info_command, help_command,
    done_command, mood_command, energy_command, water_command
)
from handlers.admin import (
    admin_add_plan, add_plan_user, add_plan_date, 
    add_plan_content, admin_stats, admin_users, button_callback
)
from handlers.reminder import (
    remind_me_command, regular_remind_command, 
    my_reminders_command, delete_remind_command,
    handle_reminder_nlp, schedule_reminders, send_morning_plan, send_evening_survey
)
from handlers.base import handle_all_messages

# –ò–º–ø–æ—Ä—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
from database import initialize_database

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è graceful shutdown
application = None

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if application:
        application.stop()
    sys.exit(0)

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    error = context.error
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∏ –Ω–µ–≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    ignore_errors = [
        "terminated by other getUpdates request",
        "Conflict", 
        "ConnectionError",
        "Timed out",
        "RetryAfter",
        "Restarting",
        "Connection lost",
        "Connection aborted",
        "Read timed out",
        "Bad Request",
        "Forbidden",
        "Not Found",
        "Unauthorized",
        "Chat not found"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É
    for ignore in ignore_errors:
        if ignore in str(error):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: {error}")
            return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error}")

async def main():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        logger.info("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===")
        logger.info(f"‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω: {POSTGRESQL_AVAILABLE}")
        logger.info(f"‚úÖ Google Sheets –¥–æ—Å—Ç—É–ø–µ–Ω: {GOOGLE_SHEETS_AVAILABLE}")
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TOKEN else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        logger.info(f"‚úÖ Chat ID: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if YOUR_CHAT_ID else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not TOKEN or ':' not in TOKEN:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789:ABCdef...'")
            return

        if not YOUR_CHAT_ID:
            logger.error("‚ùå Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YOUR_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
            return

        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)
        if POSTGRESQL_AVAILABLE:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await initialize_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î - PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram...")
        application = Application.builder().token(TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        logger.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        
        # ConversationHandler - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /start
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                GENDER: [
                    MessageHandler(filters.Regex('^(üßå –ú—É–∂—Å–∫–æ–π|üßùüèΩ‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π|–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), gender_choice)
                ],
                READY_CONFIRMATION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ready_confirmation)
                ],
                QUESTIONNAIRE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)
                ],
                ADD_PLAN_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plan_user)],
                ADD_PLAN_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plan_date)],
                ADD_PLAN_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plan_content)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            allow_reentry=True,
            name="main_conversation"
        )

        # ConversationHandler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        application.add_handler(conv_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        application.add_handler(CommandHandler("plan", plan_command))
        application.add_handler(CommandHandler("progress", progress_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("points_info", points_info_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        application.add_handler(CommandHandler("done", done_command))
        application.add_handler(CommandHandler("mood", mood_command))
        application.add_handler(CommandHandler("energy", energy_command))
        application.add_handler(CommandHandler("water", water_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        application.add_handler(CommandHandler("remind_me", remind_me_command))
        application.add_handler(CommandHandler("regular_remind", regular_remind_command))
        application.add_handler(CommandHandler("my_reminders", my_reminders_command))
        application.add_handler(CommandHandler("delete_remind", delete_remind_command))

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        application.add_handler(CommandHandler("add_plan", admin_add_plan))
        application.add_handler(CommandHandler("admin_stats", admin_stats))
        application.add_handler(CommandHandler("admin_users", admin_users))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ—Å–ª–µ–¥–Ω–∏–º
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages), group=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        schedule_reminders(application)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JobQueue
        logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JobQueue...")
        try:
            job_queue = application.job_queue
            if job_queue:
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
                our_jobs = [job for job in job_queue.jobs() if job.name in ["morning_plan", "evening_survey"]]
                for job in our_jobs:
                    job.schedule_removal()
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(our_jobs)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")
                
                # –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 6:00 (3:00 UTC –¥–ª—è UTC+3)
                job_queue.run_daily(
                    callback=send_morning_plan,
                    time=dt_time(hour=3, minute=0, second=0),
                    days=tuple(range(7)),
                    name="morning_plan"
                )
                
                # –í–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å –≤ 21:00 (18:00 UTC –¥–ª—è UTC+3)
                job_queue.run_daily(
                    callback=send_evening_survey,
                    time=dt_time(hour=18, minute=0, second=0),
                    days=tuple(range(7)),
                    name="evening_survey"
                )
                
                logger.info("‚úÖ JobQueue –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                logger.warning("‚ö†Ô∏è JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JobQueue –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info("=== –í–°–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´ ===")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.run_polling(
            poll_interval=1.0,
            timeout=20,
            drop_pending_updates=True,
            allowed_updates=[
                "message", 
                "callback_query",
                "edited_message"
            ]
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        raise

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
        asyncio.run(main())
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
