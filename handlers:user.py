import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, CallbackContext

from config import logger
from database import (
    update_user_activity, check_user_registered, save_progress_to_db,
    has_sufficient_data, get_user_activity_streak, get_user_main_goal,
    get_favorite_ritual, get_user_level_info, get_user_usage_days,
    get_db_connection
)
from services.google_sheets import (
    get_daily_plan_from_sheets, save_daily_report_to_sheets
)

# –í–û–°–°–¢–ê–ù–û–í–ò–õ –ª–æ–≥–≥–µ—Ä - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

async def plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not check_user_registered(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ Google Sheets
    today = datetime.now().strftime("%Y-%m-%d")
    plan_data = get_daily_plan_from_sheets(user_id, today)
    
    if not plan_data:
        await update.message.reply_text(
            "üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤.\n\n"
            "–ù–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –∏ —Å–∫–æ—Ä–æ —Å–æ—Å—Ç–∞–≤–∏—Ç –¥–ª—è –≤–∞—Å "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n"
            "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
    plan_text = f"üìã –í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ {today}:\n\n"
    
    if plan_data.get('strategic_tasks'):
        plan_text += "üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
        for task in plan_data['strategic_tasks']:
            plan_text += f"‚Ä¢ {task}\n"
        plan_text += "\n"
    
    if plan_data.get('critical_tasks'):
        plan_text += "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
        for task in plan_data['critical_tasks']:
            plan_text += f"‚Ä¢ {task}\n"
        plan_text += "\n"
    
    if plan_data.get('priorities'):
        plan_text += "üéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –î–ù–Ø:\n"
        for priority in plan_data['priorities']:
            plan_text += f"‚Ä¢ {priority}\n"
        plan_text += "\n"
    
    if plan_data.get('advice'):
        plan_text += "üí° –°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
        for advice in plan_data['advice']:
            plan_text += f"‚Ä¢ {advice}\n"
        plan_text += "\n"
    
    if plan_data.get('motivation_quote'):
        plan_text += f"üí´ –ú–û–¢–ò–í–ê–¶–ò–Ø: {plan_data['motivation_quote']}\n"
    
    await update.message.reply_text(plan_text)

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not check_user_registered(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    if not has_sufficient_data(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
        usage_days = get_user_usage_days(user_id)
        
        await update.message.reply_text(
            f"üìä –í–ê–® –ü–†–û–ì–†–ï–°–° –§–û–†–ú–ò–†–£–ï–¢–°–Ø!\n\n"
            f"üìÖ –î–µ–Ω—å {usage_days['current_day']} ‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {usage_days['days_since_registration']} ‚Ä¢ –°–µ—Ä–∏—è: {usage_days['current_streak']}\n\n"
            f"–ü–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\n"
            f"‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: 0/‚àû\n"
            f"‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
            f"‚úì –≠–Ω–µ—Ä–≥–∏—è: —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ\n"
            f"‚úì –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n"
            f"‚úì –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –º–æ–Ω–∏—Ç–æ—Ä–∏–º —Å {usage_days['days_since_registration']} –¥–Ω–µ–π\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!\n"
            f"–£–∂–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        conn = get_db_connection()
        if not conn:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_days,
                    AVG(tasks_completed) as avg_tasks,
                    AVG(mood) as avg_mood,
                    AVG(energy) as avg_energy,
                    AVG(water_intake) as avg_water,
                    COUNT(DISTINCT progress_date) as active_days
                FROM user_progress 
                WHERE user_id = %s AND progress_date >= CURRENT_DATE - INTERVAL '7 days'
            """, (user_id,))
            
            result = cursor.fetchone()
            
            total_days = result['total_days'] or 0
            avg_tasks = result['avg_tasks'] or 0
            avg_mood = result['avg_mood'] or 0
            avg_energy = result['avg_energy'] or 0
            avg_water = result['avg_water'] or 0
            active_days = result['active_days'] or 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥–∏–Ω–∞–º–∏–∫—É
            tasks_completed = f"{int(avg_tasks * 10)}/10" if avg_tasks else "0/10"
            mood_str = f"{avg_mood:.1f}/10" if avg_mood else "0/10"
            energy_str = f"{avg_energy:.1f}/10" if avg_energy else "0/10"
            water_str = f"{avg_water:.1f} —Å—Ç–∞–∫–∞–Ω–æ–≤/–¥–µ–Ω—å" if avg_water else "0 —Å—Ç–∞–∫–∞–Ω–æ–≤/–¥–µ–Ω—å"
            activity_str = f"{active_days}/7 –¥–Ω–µ–π"

            # –î–∏–Ω–∞–º–∏–∫–∞
            mood_dynamics = "‚Üó —É–ª—É—á—à–∞–µ—Ç—Å—è" if avg_mood and avg_mood > 6 else "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ"
            energy_dynamics = "‚Üó —Ä–∞—Å—Ç–µ—Ç" if avg_energy and avg_energy > 6 else "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ"
            productivity_dynamics = "‚Üó —Ä–∞—Å—Ç–µ—Ç" if avg_tasks and avg_tasks > 5 else "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ"

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            usage_days = get_user_usage_days(user_id)
            level_info = get_user_level_info(user_id)

            # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
            advice = "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏."
            if avg_water and avg_water < 6:
                advice = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –¥–æ 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ - —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é!"
            elif avg_mood and avg_mood < 6:
                advice = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞ - —ç—Ç–æ —É–ª—É—á—à–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"

            await update.message.reply_text(
                f"üìä –í–ê–® –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–°\n\n"
                f"üìÖ –î–µ–Ω—å {usage_days['current_day']} ‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {usage_days['days_since_registration']} ‚Ä¢ –°–µ—Ä–∏—è: {usage_days['current_streak']}\n\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {tasks_completed}\n"
                f"üòä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_str}\n"
                f"‚ö° –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {energy_str}\n"
                f"üíß –í–æ–¥–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º: {water_str}\n"
                f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_str}\n\n"
                f"üìà –î–ò–ù–ê–ú–ò–ö–ê:\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_dynamics}\n"
                f"‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: {energy_dynamics}\n"
                f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity_dynamics}\n\n"
                f"üéØ –°–û–í–ï–¢: {advice}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            conn.close()

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = user.id
    update_user_activity(user_id)
    
    if not check_user_registered(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    main_goal = get_user_main_goal(user_id)
    usage_days = get_user_usage_days(user_id)
    level_info = get_user_level_info(user_id)
    favorite_ritual = get_favorite_ritual(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞–Ω–∞–º
    conn = get_db_connection()
    if not conn:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM user_plans WHERE user_id = %s", 
            (user_id,)
        )
        total_plans_result = cursor.fetchone()
        total_plans = total_plans_result['count'] if total_plans_result else 0

        cursor.execute(
            "SELECT COUNT(*) FROM user_plans WHERE user_id = %s AND status = 'completed'", 
            (user_id,)
        )
        completed_plans_result = cursor.fetchone()
        completed_plans = completed_plans_result['count'] if completed_plans_result else 0

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
        plans_percentage = (completed_plans / total_plans * 100) if total_plans > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_text = (
            f"üë§ –í–ê–® –ü–†–û–§–ò–õ–¨\n\n"
            f"üìÖ –î–µ–Ω—å {usage_days['current_day']} ‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {usage_days['days_since_registration']} ‚Ä¢ –°–µ—Ä–∏—è: {usage_days['current_streak']}\n\n"
            f"üéØ –¢–ï–ö–£–©–ê–Ø –¶–ï–õ–¨: {main_goal}\n"
            f"üìä –í–´–ü–û–õ–ù–ï–ù–û: {plans_percentage:.1f}% –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏\n\n"
            f"üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {completed_plans} –∏–∑ {total_plans} ({plans_percentage:.1f}%)\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {usage_days['current_streak']} –¥–Ω–µ–π\n"
            f"‚Ä¢ –õ—é–±–∏–º—ã–π —Ä–∏—Ç—É–∞–ª: {favorite_ritual}\n\n"
            f"üéÆ –£–†–û–í–ï–ù–¨: {level_info['level']}\n"
            f"‚≠ê –û–ß–ö–û–í: {level_info['points']} –∏–∑ {level_info['next_level_points']} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n"
            f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
        )
        
        await update.message.reply_text(profile_text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()

async def points_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤"""
    help_text = (
        "üéÆ –°–ò–°–¢–ï–ú–ê –û–ß–ö–û–í –ò –£–†–û–í–ù–ï–ô:\n\n"
        "üìä –ö–∞–∫ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏:\n"
        "‚Ä¢ +10 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ +2 –æ—á–∫–∞ –∑–∞ –∫–∞–∂–¥—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É\n"
        "‚Ä¢ +5 –æ—á–∫–æ–≤ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ +15 –æ—á–∫–æ–≤ –∑–∞ —Å–µ—Ä–∏—é –∏–∑ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n\n"
        "üèÜ –£—Ä–æ–≤–Ω–∏:\n"
        "‚Ä¢ –ù–æ–≤–∏—á–æ–∫ (0 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –£—á–µ–Ω–∏–∫ (50 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –û–ø—ã—Ç–Ω—ã–π (100 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (200 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä (500 –æ—á–∫–æ–≤)\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!\n"
        "‚Ä¢ –î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –æ—á–∫–∏\n"
        "‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–∏"
    )
    await update.message.reply_text(help_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        
        "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/plan - –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/progress - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/points_info - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–∫–æ–≤\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        
        "üîπ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
        "/done <1-4> - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/mood <1-10> - –û—Ü–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "/energy <1-10> - –û—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏\n"
        "/water <—Å—Ç–∞–∫–∞–Ω—ã> - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã\n\n"
        
        "üîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "/remind_me <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> - –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/regular_remind <–≤—Ä–µ–º—è> <–¥–Ω–∏> <—Ç–µ–∫—Å—Ç> - –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/my_reminders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/delete_remind <id> - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
        
        "üí° –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫'\n"
        "'–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –≤ 11 –≤–µ—á–µ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'\n\n"
        
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!"
    )
    
    await update.message.reply_text(help_text)

async def done_command(update: Update, context: CallbackContext):
    """–û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:\n"
            "/done 1 - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
            "/done 2 - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
        )
        return
    
    try:
        task_number = int(context.args[0])
        if task_number < 1 or task_number > 4:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4")
            return
        
        task_names = {1: "–ø–µ—Ä–≤—É—é", 2: "–≤—Ç–æ—Ä—É—é", 3: "—Ç—Ä–µ—Ç—å—é", 4: "—á–µ—Ç–≤–µ—Ä—Ç—É—é"}
        
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {task_names[task_number]} –∑–∞–¥–∞—á—É!\n"
            f"üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def mood_command(update: Update, context: CallbackContext):
    """–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10:\n"
            "/mood 1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ\n"
            "/mood 5 - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ\n" 
            "/mood 10 - –æ—Ç–ª–∏—á–Ω–æ–µ"
        )
        return
    
    try:
        mood = int(context.args[0])
        if mood < 1 or mood > 10:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return
        
        progress_data = {
            'mood': mood,
            'progress_date': datetime.now().strftime("%Y-%m-%d")
        }
        save_progress_to_db(user_id, progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        report_data = {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'mood': mood
        }
        save_daily_report_to_sheets(user_id, report_data)
        
        mood_responses = {
            1: "üòî –ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —É –≤–∞—Å –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
            2: "üòü –ù–∞–¥–µ—é—Å—å, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!",
            3: "üôÅ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã!",
            4: "üòê –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å!",
            5: "üòä –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ - —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!",
            6: "üòÑ –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!",
            7: "üòÅ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –∑–∞ –≤–∞—Å!",
            8: "ü§© –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
            9: "ü•≥ –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
            10: "üéâ –ò–¥–µ–∞–ª—å–Ω–æ!"
        }
        
        response = mood_responses.get(mood, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        await update.message.reply_text(f"{response}\n\nüìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")

async def energy_command(update: Update, context: CallbackContext):
    """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç 1 –¥–æ 10:\n"
            "/energy 1 - —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Å–∏–ª\n"
            "/energy 5 - —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
            "/energy 10 - –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏!"
        )
        return
    
    try:
        energy = int(context.args[0])
        if energy < 1 or energy > 10:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return
        
        progress_data = {
            'energy': energy,
            'progress_date': datetime.now().strftime("%Y-%m-%d")
        }
        save_progress_to_db(user_id, progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        report_data = {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'energy': energy
        }
        save_daily_report_to_sheets(user_id, report_data)
        
        energy_responses = {
            1: "üí§ –í–∞–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?",
            2: "üò¥ –ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è —Ç—è–∂–µ–ª—ã–π –¥–µ–Ω—å. –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è!",
            3: "üõå –û—Ç–¥—ã—Ö - —ç—Ç–æ —Ç–æ–∂–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ!",
            4: "üßò –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—Ä—è–¥–∫–∞ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å!",
            5: "‚ö° –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!",
            6: "üí™ –•–æ—Ä–æ—à–∞—è —ç–Ω–µ—Ä–≥–∏—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            7: "üöÄ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏!",
            8: "üî• –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —ç–Ω–µ—Ä–≥–∏—é!",
            9: "üåü –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è!",
            10: "üéØ –ò–¥–µ–∞–ª—å–Ω–æ! –í—ã –ø–æ–ª–Ω—ã —Å–∏–ª!"
        }
        
        response = energy_responses.get(energy, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        await update.message.reply_text(f"{response}\n\nüìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")

async def water_command(update: Update, context: CallbackContext):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–∞–Ω–æ–≤: /water 6\n\n"
            "–ü—Ä–∏–º–µ—Ä: /water 8 - –≤—ã–ø–∏—Ç–æ 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã"
        )
        return
    
    try:
        water = int(context.args[0])
        if water < 0 or water > 20:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–∞–Ω–æ–≤ (0-20)")
            return
        
        progress_data = {
            'water_intake': water,
            'progress_date': datetime.now().strftime("%Y-%m-%d")
        }
        save_progress_to_db(user_id, progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        report_data = {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'water_intake': water
        }
        save_daily_report_to_sheets(user_id, report_data)
        
        responses = {
            0: "üíß –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã?",
            1: "üíß –ú–∞–ª–æ –≤–æ–¥—ã, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ!",
            2: "üíß –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            3: "üíß –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!",
            4: "üíß –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!",
            5: "üíß –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!",
            6: "üíß –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            7: "üíß –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!",
            8: "üíß –ò–¥–µ–∞–ª—å–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü!"
        }
        response = responses.get(water, f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {water} —Å—Ç–∞–∫–∞–Ω–æ–≤")
        await update.message.reply_text(f"{response}\n\nüìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")