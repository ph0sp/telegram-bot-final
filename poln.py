import os
import logging
import asyncio
import time
import json
import re
from datetime import datetime, time as dt_time, timedelta
from typing import Dict, Optional, Any, List
from contextlib import contextmanager

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv
 
# Google Sheets
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    print("‚ö†Ô∏è Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

# PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    import urllib.parse
    POSTGRESQL_AVAILABLE = True
except ImportError:
    POSTGRESQL_AVAILABLE = False
    print("‚ö†Ô∏è PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('BOT_TOKEN')
YOUR_CHAT_ID = os.environ.get('YOUR_CHAT_ID')
GOOGLE_CREDENTIALS_JSON = os.environ.get('GOOGLE_CREDENTIALS_JSON')
GOOGLE_SHEETS_ID = os.environ.get('GOOGLE_SHEETS_ID')
DATABASE_URL = os.environ.get('DATABASE_URL')  # –î–ª—è PostgreSQL –Ω–∞ Render

# üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º Google credentials
if GOOGLE_CREDENTIALS_JSON:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_keys = ['type', 'project_id', 'private_key_id', 'private_key']
        if not all(key in creds_dict for key in required_keys):
            logger.error("‚ùå Google credentials JSON missing required fields")
            GOOGLE_CREDENTIALS_JSON = None
    except json.JSONDecodeError:
        logger.error("‚ùå Google credentials JSON is invalid")
        GOOGLE_CREDENTIALS_JSON = None

if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN")
    exit(1)

if not YOUR_CHAT_ID:
    logger.error("‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YOUR_CHAT_ID")
    exit(1)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
GENDER, FIRST_QUESTION = range(2)
ADD_PLAN_USER, ADD_PLAN_DATE, ADD_PLAN_CONTENT = range(3, 6)
SELECT_TEMPLATE, SELECT_USER_FOR_TEMPLATE, SELECT_DATE_FOR_TEMPLATE = range(6, 9)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–ª–∞–Ω–æ–≤
PLAN_FIELDS = {
    'id': 0, 'user_id': 1, 'plan_date': 2, 'morning_ritual1': 4, 'morning_ritual2': 5,
    'task1': 6, 'task2': 7, 'task3': 8, 'task4': 9, 'lunch_break': 10,
    'evening_ritual1': 11, 'evening_ritual2': 12, 'advice': 13, 'sleep_time': 14,
    'water_goal': 15, 'activity_goal': 16
}

QUESTIONS = [
    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!\n–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ.\n–ù–∞—á–Ω–µ–º —Å —Å–∞–º–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ\n\n–ë–ª–æ–∫ 1: –¶–µ–ª—å –∏ –≥–ª–∞–≤–Ω—ã–π —Ñ–æ–∫—É—Å\n–ö–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É, —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã, –æ–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –Ω–∞–≤—ã–∫—É)\n\n–ñ–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ü–µ–ª—å! –≠—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞, –≥–¥–µ –≤–∞–∂–Ω—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, —á—Ç–æ–±—ã –µ–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ—á–µ–º—É –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–∞ —ç—Ç–∞ —Ü–µ–ª—å? –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –≤—ã –µ–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ?",
    "–ö–∞–∫ –≤—ã –ø–æ–Ω—è–ª–∏ –±—ã —á—Ç–æ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞? –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∫–∞–∂—É—Ç –≤–∞–º \"–¥–∞, —è —ç—Ç–æ —Å–¥–µ–ª–∞–ª!\"?\n\n–ü—Ä–∏–º–µ—Ä—ã:\n- \"–ö–æ–≥–¥–∞ –±—É–¥—É –≤–µ—Å–∏—Ç—å 65 –∫–≥ –∏ –≤–ª–µ–∑—É –≤ –ø–ª–∞—Ç—å–µ 44 —Ä–∞–∑–º–µ—Ä–∞\"\n- \"–ö–æ–≥–¥–∞ –º–æ–π –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å 100 000 —Ä—É–±/–º–µ—Å—è—Ü\"\n- \"–ö–æ–≥–¥–∞ —Å–º–æ–≥—É —Å–≤–æ–±–æ–¥–Ω–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏\"",
    "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–≤—è—â–∞—Ç—å —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —ç—Ç–æ–π —Ü–µ–ª—å—é? (–≤–∞–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —á–µ—Å—Ç–Ω–æ)",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ–¥–ª–∞–π–Ω –ø–æ —ç—Ç–æ–π —Ü–µ–ª–∏? –ï—Å–ª–∏ –¥–∞ ‚Äì –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Å—Ä–æ–∫? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –∫–æ–≥–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –µ–µ –¥–æ—Å—Ç–∏—á—å? –ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏?\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç–µ, –º—ã –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∏—Ç–º –∂–∏–∑–Ω–∏ –∏ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å.",
    
    "–û—Ç–ª–∏—á–Ω–æ, –æ—Å–Ω–æ–≤–∞ –ø–æ–Ω—è—Ç–Ω–∞. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É —Ä–∏—Ç–º—É –∂–∏–∑–Ω–∏, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å —ç—Ç—É —Ü–µ–ª—å –≤ –≤–∞—à –¥–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –±–µ–∑ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.\n\n–ë–ª–æ–∫ 2: –¢–µ–∫—É—â–∏–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –∏ —Ä–µ—Å—É—Ä—Å—ã\n\n–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –∏ –ª–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å?",
    "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫ –æ–±—ã—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (—Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏)?",
    "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º? (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä)",
    "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –æ–±—ã—á–Ω–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–ª–∏ –±–ª–∏–∑–∫–∏–º –∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—é –∏ —á—Ç–æ —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç?",
    
    "–ë–ª–æ–∫ 3: –°—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã\n\n–ö–∞–∫ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å?\n‚ñ° –î–ª–∏–Ω–Ω—ã–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –±–ª–æ–∫–∏ (2-4 —á–∞—Å–∞)\n‚ñ° –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ—Å—Å–∏–∏ (25-50 –º–∏–Ω—É—Ç)\n‚ñ° –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á\n‚ñ° –ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å",
    "–ß—Ç–æ –≤–∞–º –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è?\n‚ñ° –¢–∏—à–∏–Ω–∞\n‚ñ° –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞\n‚ñ° –†–∞–±–æ—Ç–∞ –≤ –∫–∞—Ñ–µ\n‚ñ° –¢–∞–π–º–µ—Ä—ã\n‚ñ° –î–µ–¥–ª–∞–π–Ω—ã",
    "–ö–∞–∫ –≤—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤?\n‚ñ° –°–æ—Ü—Å–µ—Ç–∏\n‚ñ° –ü—Ä–æ–≥—É–ª–∫–∞\n‚ñ° –†–∞—Å—Ç—è–∂–∫–∞\n‚ñ° –ß—Ç–µ–Ω–∏–µ\n‚ñ° –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é",
    
    "–ë–ª–æ–∫ 4: –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n‚ñ° –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏\n‚ñ° –õ–µ–≥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏\n‚ñ° –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-2 —Ä–∞–∑–∞\n‚ñ° –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3+ —Ä–∞–∑–∞",
    "–ö–∞–∫–∏–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è/–≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è? (–±–µ–≥, –π–æ–≥–∞, –ø–ª–∞–≤–∞–Ω–∏–µ, —Å–∏–ª–æ–≤—ã–µ, —Ç–∞–Ω—Ü—ã)",
    "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞ —Å–ø–æ—Ä—Ç? (–ù–∞–ø—Ä–∏–º–µ—Ä, 3 —Ä–∞–∑–∞ –ø–æ 45 –º–∏–Ω—É—Ç)",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏?",
    
    "–ë–ª–æ–∫ 5: –ü–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω –∏ –≤–æ–¥–∞\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è:\n- –ó–∞–≤—Ç—Ä–∞–∫: ‚ñ° –≤—Å–µ–≥–¥–∞ ‚ñ° –∏–Ω–æ–≥–¥–∞ ‚ñ° —Ä–µ–¥–∫–æ\n- –û–±–µ–¥: ‚ñ° –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π ‚ñ° –ø–µ—Ä–µ–∫—É—Å\n- –£–∂–∏–Ω: ‚ñ° –ª–µ–≥–∫–∏–π ‚ñ° –ø–ª–æ—Ç–Ω—ã–π\n- –ü–µ—Ä–µ–∫—É—Å—ã: ‚ñ° —á–∞—Å—Ç–æ ‚ñ° —Ä–µ–¥–∫–æ",
    "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –æ–±—ã—á–Ω–æ –ø—å–µ—Ç–µ? ‚ñ° 1-2 —Å—Ç–∞–∫–∞–Ω–∞ ‚ñ° 4-5 ‚ñ° 8+",
    "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø–∏—Ç–∞–Ω–∏–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π, –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–±–µ–¥, –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã)",
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –æ–±—ã—á–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç–µ –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –µ–¥—ã?",
    "–ö–∞–∫ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Å–Ω–∞? ‚ñ° –æ—Ç–ª–∏—á–Ω–æ ‚ñ° –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚ñ° –ø–ª–æ—Ö–æ\n–ß—Ç–æ –º–µ—à–∞–µ—Ç —Å–ø–∞—Ç—å —Ö–æ—Ä–æ—à–æ?",
    
    "üß† –ë–õ–û–ö 6: –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï\n\n–ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?\n‚ñ° –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n‚ñ° –û–¥–æ–±—Ä–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö\n‚ñ° –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å\n‚ñ° –î–µ–Ω—å–≥–∏/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
    "–ß—Ç–æ –æ–±—ã—á–Ω–æ –º–µ—à–∞–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∞–º?\n‚ñ° –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è\n‚ñ° –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º\n‚ñ° –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–Ω–µ—Ä–≥–∏–∏\n‚ñ° –ù–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å",
    "–ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?\n‚ñ° –°–ø–æ—Ä—Ç\n‚ñ° –†–∞–∑–≥–æ–≤–æ—Ä—ã\n‚ñ° –£–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚ñ° –•–æ–±–±–∏\n‚ñ° –î—Ä—É–≥–æ–µ: _____",
    
    "–ë–ª–æ–∫ 7: –û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n–ß—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–¥—ã—Ö?\n‚ñ° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n‚ñ° –ü–∞—Å—Å–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö\n‚ñ° –û–±—â–µ–Ω–∏–µ\n‚ñ° –£–µ–¥–∏–Ω–µ–Ω–∏–µ",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞–º —É–¥–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è –Ω–∞ —ç—Ç–∏ –∑–∞–Ω—è—Ç–∏—è?",
    "–ö–∞–∫–∏–µ —Ä–∏—Ç—É–∞–ª—ã –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º:\n- –ü—Ä–æ—Å–Ω—É—Ç—å—Å—è: __________\n- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É: __________\n- –†–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –≤–µ—á–µ—Ä–æ–º: __________",
    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –∏–ª–∏ –º–∏–∫—Ä–æ-–ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?",
    "–í–∞–∂–Ω–æ –ª–∏ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å —Å–µ–º—å–µ–π/–¥—Ä—É–∑—å—è–º–∏? –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —ç—Ç–æ –≤–∏–¥–µ—Ç—å –≤ —Å–≤–æ–µ–º –ø–ª–∞–Ω–µ?",
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –≤–∞–º –Ω—É–∂–Ω–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤/—Ö–æ–±–±–∏?",
    
    "–ë–ª–æ–∫ 8: –†–∏—Ç—É–∞–ª—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n\n–ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∂–∏–º–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –Ω–∞ –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π. –ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –≤–∞–º –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?\n\n–£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã (–Ω–∞ –≤—ã–±–æ—Ä):\n* –°—Ç–∞–∫–∞–Ω —Ç–µ–ø–ª–æ–π –≤–æ–¥—ã —Å –ª–∏–º–æ–Ω–æ–º: –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞.\n* –ù–µ—Å–ª–æ–∂–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞/—Ä–∞—Å—Ç—è–∂–∫–∞ (5-15 –º–∏–Ω): —á—Ç–æ–±—ã —Ä–∞–∑–º—è—Ç—å—Å—è –∏ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è.\n* –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ (5-10 –º–∏–Ω): –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –¥–µ–Ω—å.\n* –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à: –¥–ª—è –±–æ–¥—Ä–æ—Å—Ç–∏.\n* –ü–æ–ª–µ–∑–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è.\n\n–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã (–Ω–∞ –≤—ã–±–æ—Ä):\n* –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–¥–∂–µ—Ç–æ–≤ –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞: –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞.\n* –í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞–ø–∏—Å—å 3—Ö —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–Ω—è.\n* –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (–Ω–µ —Å —ç–∫—Ä–∞–Ω–∞).\n* –õ–µ–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –∏–ª–∏ –π–æ–≥–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º: –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –º—ã—à—Ü.\n* –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å (3 –¥–µ–ª–∞): —á—Ç–æ–±—ã \"–≤—ã–≥—Ä—É–∑–∏—Ç—å\" –º—ã—Å–ª–∏ –∏ —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ.\n* –ê—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏—è –∏–ª–∏ —Å–ø–æ–∫–æ–π–Ω–∞—è –º—É–∑—ã–∫–∞.\n\n–ö–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤ –≤–∞–º –±—ã–ª–∏ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?\n\n–ö–∞–∫–∏–µ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–Ω–µ–¥—Ä–∏—Ç—å?\n\n–ï—Å—Ç—å –ª–∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
    
    "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª—Å—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫.\n\n–ë–ª–æ–∫ 9: –§–∏–Ω–∞–ª—å–Ω—ã–µ –£—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –ì–∏–±–∫–æ—Å—Ç—å\n\n–ö–∞–∫–æ–π –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–¥—ã—Ö–æ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70/30, 60/40)",
    "–ß—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—à–∞–µ—Ç –≤–∞–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∞–º? (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –¥–µ–ª–∞, –ª–µ–Ω—å, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏)",
    "–ö–∞–∫ –Ω–∞–º –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å \"–¥–Ω–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤\" –∏–ª–∏ –¥–Ω–∏ —Å –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π? (–ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å 1-2 —Ç–∞–∫–∏—Ö –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é)"
]

# ========== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========

@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    if not DATABASE_URL or not POSTGRESQL_AVAILABLE:
        logger.error("‚ùå PostgreSQL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        raise Exception("PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    conn = None
    try:
        # Parse the database URL for PostgreSQL
        urllib.parse.uses_netloc.append("postgres")
        url = urllib.parse.urlparse(DATABASE_URL)
        
        conn = psycopg2.connect(
            database=url.path[1:],
            user=url.username,
            password=url.password,
            host=url.hostname,
            port=url.port,
            cursor_factory=RealDictCursor
        )
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        yield conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        raise
    finally:
        if conn:
            conn.close()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS clients (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT UNIQUE NOT NULL,
                    first_name TEXT,
                    username TEXT,
                    last_name TEXT,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'active',
                    gender TEXT,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–Ω–∫–µ—Ç—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS questionnaire_answers (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    question_number INTEGER NOT NULL,
                    question_text TEXT,
                    answer_text TEXT NOT NULL,
                    answer_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES clients(user_id) ON DELETE CASCADE,
                    UNIQUE(user_id, question_number)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_progress (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    progress_date DATE NOT NULL,
                    tasks_completed INTEGER DEFAULT 0,
                    mood INTEGER,
                    energy INTEGER,
                    sleep_quality INTEGER,
                    water_intake INTEGER,
                    activity_done TEXT,
                    user_comment TEXT,
                    day_rating INTEGER,
                    challenges TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES clients(user_id) ON DELETE CASCADE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_reminders (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    reminder_text TEXT NOT NULL,
                    reminder_time TIME NOT NULL,
                    days_of_week TEXT,
                    reminder_type TEXT NOT NULL,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES clients(user_id) ON DELETE CASCADE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_plans (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    plan_date DATE NOT NULL,
                    morning_ritual1 TEXT,
                    morning_ritual2 TEXT,
                    task1 TEXT,
                    task2 TEXT,
                    task3 TEXT,
                    task4 TEXT,
                    lunch_break TEXT,
                    evening_ritual1 TEXT,
                    evening_ritual2 TEXT,
                    advice TEXT,
                    sleep_time TEXT,
                    water_goal TEXT,
                    activity_goal TEXT,
                    status TEXT DEFAULT 'active',
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES clients(user_id) ON DELETE CASCADE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_messages (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    message_text TEXT NOT NULL,
                    direction TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES clients(user_id) ON DELETE CASCADE
                )
            ''')
            
            conn.commit()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# ========== –°–ò–°–¢–ï–ú–ê –®–ê–ë–õ–û–ù–û–í –ü–õ–ê–ù–û–í ==========

PLAN_TEMPLATES = {
    "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π_–¥–µ–Ω—å": {
        "name": "üöÄ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å",
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
        "strategic_tasks": [
            "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º (3-4 —á–∞—Å–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã)",
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è",
            "–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (1 —á–∞—Å)"
        ],
        "critical_tasks": [
            "–°–∞–º–∞—è –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–Ω—è (—Å—ä–µ—Å—Ç—å –ª—è–≥—É—à–∫—É)",
            "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è"
        ],
        "priorities": [
            "–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –∑–∞ —Ä–∞–∑",
            "–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å",
            "–ó–∞–≤–µ—Ä—à–∞—Ç—å –Ω–∞—á–∞—Ç–æ–µ"
        ],
        "advice": [
            "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ (25/5)",
            "–û—Ç–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã"
        ],
        "special_rituals": [
            "–£—Ç—Ä–µ–Ω–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è (10 –º–∏–Ω—É—Ç)",
            "–í–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
            "–¢–µ—Ö–Ω–∏–∫–∞ '5 –ø–æ—á–µ–º—É' –¥–ª—è –ø—Ä–æ–±–ª–µ–º"
        ],
        "time_blocks": [
            "09:00-12:00 - –ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞",
            "12:00-13:00 - –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö", 
            "13:00-16:00 - –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "16:00-17:00 - –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "17:00-18:00 - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞"
        ],
        "resources": [
            "–¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥oro",
            "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
            "–í–æ–¥–∞ –Ω–∞ —Å—Ç–æ–ª–µ"
        ],
        "expected_results": [
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–Ω—è",
            "–ß–µ—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
            "–ß—É–≤—Å—Ç–≤–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
        ],
        "reminders": [
            "–ö–∞–∂–¥—ã–π —á–∞—Å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 5 –º–∏–Ω—É—Ç",
            "–ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–∞–Ω–∫—É"
        ],
        "motivation_quote": "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ –º–æ—Å—Ç –º–µ–∂–¥—É —Ü–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏."
    },
    
    "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π_–¥–µ–Ω—å": {
        "name": "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –¥–µ–Ω—å", 
        "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
        "strategic_tasks": [
            "–ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –Ω–æ–≤—ã—Ö –∏–¥–µ–π",
            "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –∏–ª–∏ –º–∞–∫–µ—Ç–∞"
        ],
        "critical_tasks": [
            "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–¥–µ–∏ (–¥–∞–∂–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ)",
            "–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø",
            "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏"
        ],
        "priorities": [
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            "–ù–µ –∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å –∏–¥–µ–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞"
        ],
        "advice": [
            "–°–ª—É—à–∞–π—Ç–µ –º—É–∑—ã–∫—É –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è",
            "–ú–µ–Ω—è–π—Ç–µ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–º—É–ª–∞"
        ],
        "special_rituals": [
            "–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–∏—Å–∞—Ç—å 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞)",
            "–ü—Ä–æ–≥—É–ª–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π",
            "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ 10 –º–∏–Ω—É—Ç"
        ],
        "time_blocks": [
            "09:00-11:00 - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π",
            "11:00-13:00 - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
            "13:00-14:00 - –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö",
            "14:00-16:00 - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤",
            "16:00-17:00 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ–∏–¥–±–µ–∫"
        ],
        "resources": [
            "–ë–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∏–¥–µ–π",
            "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ü—Ä–∏–º–µ—Ä—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö —Ä–∞–±–æ—Ç"
        ],
        "expected_results": [
            "10+ –Ω–æ–≤—ã—Ö –∏–¥–µ–π",
            "1-2 —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞",
            "–ò–Ω—Å–∞–π—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è"
        ],
        "reminders": [
            "–î–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç",
            "–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –∏–¥–µ–∏",
            "–ù–µ —É–¥–∞–ª—è—Ç—å '–ø–ª–æ—Ö–∏–µ' –∏–¥–µ–∏ —Å—Ä–∞–∑—É"
        ],
        "motivation_quote": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –ø–æ–ª—É—á–∞—é—â–∏–π —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ."
    },
    
    "–±–∞–ª–∞–Ω—Å_—Ä–∞–±–æ—Ç–∞_–æ—Ç–¥—ã—Ö": {
        "name": "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç–∞-–æ—Ç–¥—ã—Ö",
        "description": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è",
        "strategic_tasks": [
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏",
            "–í—ã–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–±–±–∏ –∏ –æ—Ç–¥—ã—Ö",
            "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å"
        ],
        "critical_tasks": [
            "–ó–∞–≤–µ—Ä—à–∏—Ç—å 2-3 –≤–∞–∂–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏",
            "–í—ã–¥–µ–ª–∏—Ç—å 1-2 —á–∞—Å–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã",
            "–û—Ç–¥–æ—Ö–Ω—É—Ç—å –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã"
        ],
        "priorities": [
            "–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–¥—ã—Ö–∞ —Ç–∞–∫ –∂–µ –≤–∞–∂–Ω–æ, –∫–∞–∫ –∏ —Ä–∞–±–æ—Ç—ã",
            "–ß–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º",
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–∏–Ω–∏-–ø–µ—Ä–µ—Ä—ã–≤—ã"
        ],
        "advice": [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É 'time blocking'",
            "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ—Ç–¥—ã—Ö —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ —Ä–∞–±–æ—Ç—É",
            "–û—Ç–∫–ª—é—á–∞–π—Ç–µ —Ä–∞–±–æ—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã"
        ],
        "special_rituals": [
            "–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å",
            "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
            "–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è"
        ],
        "time_blocks": [
            "09:00-12:00 - –†–∞–±–æ—á–∏–π –±–ª–æ–∫ 1",
            "12:00-13:00 - –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö",
            "13:00-16:00 - –†–∞–±–æ—á–∏–π –±–ª–æ–∫ 2", 
            "16:00-17:00 - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–∏—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏",
            "17:00-19:00 - –•–æ–±–±–∏ –∏ –æ—Ç–¥—ã—Ö",
            "19:00-21:00 - –°–µ–º—å—è/–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è"
        ],
        "resources": [
            "–¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤",
            "–°–ø–∏—Å–æ–∫ –ø—Ä–∏—è—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
            "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã/–æ—Ç–¥—ã—Ö–∞"
        ],
        "expected_results": [
            "–í—ã–ø–æ–ª–Ω–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏",
            "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è",
            "–ß—É–≤—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è"
        ],
        "reminders": [
            "–ö–∞–∂–¥—ã–π —á–∞—Å –≤—Å—Ç–∞–≤–∞—Ç—å –∏ —Ä–∞–∑–º–∏–Ω–∞—Ç—å—Å—è",
            "–ü–∏—Ç—å –≤–æ–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ",
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ —É—Å–∏–ª–∏—è"
        ],
        "motivation_quote": "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ ‚Äî —ç—Ç–æ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å."
    },
    
    "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π_–¥–µ–Ω—å": {
        "name": "üí™ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å",
        "description": "–§–æ–∫—É—Å –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "strategic_tasks": [
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–ª–∞–Ω—É",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è",
            "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞"
        ],
        "critical_tasks": [
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
            "–°—ä–µ—Å—Ç—å 3 –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
            "–í—ã–ø–∏—Ç—å 2+ –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã"
        ],
        "priorities": [
            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
            "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"
        ],
        "advice": [
            "–†–∞–∑–º–∏–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
            "–°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–µ —Ç–µ–ª–æ",
            "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫"
        ],
        "special_rituals": [
            "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞",
            "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "–í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        ],
        "time_blocks": [
            "07:00-08:00 - –£—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "08:00-09:00 - –ó–∞–≤—Ç—Ä–∞–∫ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
            "12:00-13:00 - –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö",
            "18:00-19:30 - –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
            "19:30-20:30 - –£–∂–∏–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
        ],
        "resources": [
            "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
            "–ü–∏—Ç–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
        ],
        "expected_results": [
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
            "–•–æ—Ä–æ—à–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—è",
            "–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–µ"
        ],
        "reminders": [
            "–†–∞–∑–º–∏–Ω–∫–∞ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π",
            "–ó–∞–º–∏–Ω–∫–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–æ—Å–ª–µ",
            "–ü–∏—Ç—å –≤–æ–¥—É –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        ],
        "motivation_quote": "–°–∏–ª–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑."
    },
    
    "–æ–±—É—á–µ–Ω–∏–µ_—Ä–∞–∑–≤–∏—Ç–∏–µ": {
        "name": "üìö –î–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è",
        "description": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤",
        "strategic_tasks": [
            "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã/–Ω–∞–≤—ã–∫–∞",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π",
            "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"
        ],
        "critical_tasks": [
            "–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—á–µ–±–Ω—ã–π –º–æ–¥—É–ª—å",
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"
        ],
        "priorities": [
            "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–∞–∂–Ω–µ–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–∞–∂–Ω–µ–µ —Ç–µ–æ—Ä–∏–∏",
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        ],
        "advice": [
            "–î–µ–ª–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏",
            "–û–±—ä—è—Å–Ω—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫ –±—É–¥—Ç–æ –¥—Ä—É–≥–æ–º—É",
            "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∑–Ω–∞–Ω–∏—è —Å—Ä–∞–∑—É –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ"
        ],
        "special_rituals": [
            "–£—Ç—Ä–µ–Ω–Ω–∏–π –æ–±–∑–æ—Ä —Ü–µ–ª–µ–π –æ–±—É—á–µ–Ω–∏—è",
            "–¢–µ—Ö–Ω–∏–∫–∞ –§–µ–π–Ω–º–∞–Ω–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º",
            "–í–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ"
        ],
        "time_blocks": [
            "09:00-11:00 - –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏",
            "11:00-13:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            "13:00-14:00 - –û–±–µ–¥ –∏ –æ—Ç–¥—ã—Ö",
            "14:00-16:00 - –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ",
            "16:00-17:00 - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–µ–∫—Ç—ã"
        ],
        "resources": [
            "–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–¢–µ—Ç—Ä–∞–¥—å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è"
        ],
        "expected_results": [
            "–û—Å–≤–æ–µ–Ω –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫/–∑–Ω–∞–Ω–∏–µ",
            "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "–ß–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ],
        "reminders": [
            "–î–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç",
            "–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã",
            "–ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏"
        ],
        "motivation_quote": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–æ–≥–¥–∞ –∑–∞–±—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ –≤—ã—É—á–µ–Ω–Ω–æ–µ –≤ —à–∫–æ–ª–µ."
    }
}

WEEKLY_TEMPLATE_SCHEDULE = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π_–¥–µ–Ω—å",
    "–≤—Ç–æ—Ä–Ω–∏–∫": "–æ–±—É—á–µ–Ω–∏–µ_—Ä–∞–∑–≤–∏—Ç–∏–µ", 
    "—Å—Ä–µ–¥–∞": "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π_–¥–µ–Ω—å",
    "—á–µ—Ç–≤–µ—Ä–≥": "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π_–¥–µ–Ω—å",
    "–ø—è—Ç–Ω–∏—Ü–∞": "–±–∞–ª–∞–Ω—Å_—Ä–∞–±–æ—Ç–∞_–æ—Ç–¥—ã—Ö",
    "—Å—É–±–±–æ—Ç–∞": "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π_–¥–µ–Ω—å",
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–±–∞–ª–∞–Ω—Å_—Ä–∞–±–æ—Ç–∞_–æ—Ç–¥—ã—Ö"
}

# ========== GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    if not GOOGLE_SHEETS_AVAILABLE:
        logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
    
    try:
        if not GOOGLE_CREDENTIALS_JSON or not GOOGLE_SHEETS_ID:
            logger.warning("‚ö†Ô∏è Google Sheets credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return None
        
        # –ü–∞—Ä—Å–∏–º JSON credentials
        creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scope
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        
        # –°–æ–∑–¥–∞–µ–º credentials
        creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_key(GOOGLE_SHEETS_ID)
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            sheet.worksheet("–∫–ª–∏–µ–Ω—Ç—ã_–¥–µ—Ç–∞–ª–∏")
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title="–∫–ª–∏–µ–Ω—Ç—ã_–¥–µ—Ç–∞–ª–∏", rows=1000, cols=27)
            worksheet.append_row([
                "id_–∫–ª–∏–µ–Ω—Ç–∞", "telegram_username", "–∏–º—è", "—Å—Ç–∞—Ä—Ç_—Ä–∞–±–æ—Ç—ã",
                "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", "–æ—Ç—Ö–æ–¥_–∫–æ_—Å–Ω—É", "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏_–ø–∏—Ç–∞–Ω–∏—è", "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è_–æ—Ç–¥—ã—Ö–∞",
                "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ_—É—Ç—Ä–µ–Ω–Ω–∏–µ_—Ä–∏—Ç—É–∞–ª—ã", "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ_–≤–µ—á–µ—Ä–Ω–∏–µ_—Ä–∏—Ç—É–∞–ª—ã",
                "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_–ø—Ä–∏–≤—ã—á–∫–∏", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞_–≤–∏—Ç–∞–º–∏–Ω—ã",
                "—Ü–µ–ª–∏_—Ä–∞–∑–≤–∏–Ω–∏—è", "–≥–ª–∞–≤–Ω–∞—è_—Ü–µ–ª—å", "–æ—Å–æ–±—ã–µ_–ø—Ä–∏–º–µ—á–∞–Ω–∏—è",
                "–¥–∞—Ç–∞_–ø–æ—Å–ª–µ–¥–Ω–µ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "—Å—Ç–∞—Ç—É—Å",
                "—Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å", "–æ—á–∫–∏_–æ–ø—ã—Ç–∞", "—Ç–µ–∫—É—â–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª", 
                "–¥–∞—Ç–∞_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "–±–ª–∏–∂–∞–π—à–∞—è_—Ü–µ–ª—å"
            ])
        
        try:
            sheet.worksheet("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_–ø–ª–∞–Ω—ã_–º–µ—Å—è—Ü")
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title="–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_–ø–ª–∞–Ω—ã_–º–µ—Å—è—Ü", rows=1000, cols=40)
            headers = ["id_–∫–ª–∏–µ–Ω—Ç–∞", "telegram_username", "–∏–º—è", "–º–µ—Å—è—Ü"]
            for day in range(1, 32):
                headers.append(f"{day} –æ–∫—Ç—è–±—Ä—è")
            headers.extend(["–æ–±—â–∏–µ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–º–µ—Å—è—Ü–∞", "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"])
            worksheet.append_row(headers)
        
        try:
            sheet.worksheet("–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã")
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title="–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã", rows=1000, cols=28)
            worksheet.append_row([
                "id_–∫–ª–∏–µ–Ω—Ç–∞", "telegram_username", "–∏–º—è", "–¥–∞—Ç–∞",
                "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ_—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö_–∑–∞–¥–∞—á", "—É—Ç—Ä–µ–Ω–Ω–∏–µ_—Ä–∏—Ç—É–∞–ª—ã_–≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
                "–≤–µ—á–µ—Ä–Ω–∏–µ_—Ä–∏—Ç—É–∞–ª—ã_–≤—ã–ø–æ–ª–Ω–µ–Ω—ã", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—ç–Ω–µ—Ä–≥–∏—è",
                "—É—Ä–æ–≤–µ–Ω—å_—Ñ–æ–∫—É—Å–∞", "—É—Ä–æ–≤–µ–Ω—å_–º–æ—Ç–∏–≤–∞—Ü–∏–∏", "–ø—Ä–æ–±–ª–µ–º—ã_–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è",
                "–≤–æ–ø—Ä–æ—Å—ã_–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É", "—á—Ç–æ_–ø–æ–ª—É—á–∏–ª–æ—Å—å_—Ö–æ—Ä–æ—à–æ", 
                "–∫–ª—é—á–µ–≤—ã–µ_–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è_–¥–Ω—è", "—á—Ç–æ_–º–æ–∂–Ω–æ_—É–ª—É—á—à–∏—Ç—å",
                "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏_–Ω–∞_–∑–∞–≤—Ç—Ä–∞", "–≤–æ–¥–Ω—ã–π_–±–∞–ª–∞–Ω—Å_—Ñ–∞–∫—Ç", "—Å—Ç–∞—Ç—É—Å_–¥–Ω—è",
                "—É—Ä–æ–≤–µ–Ω—å_–¥–Ω—è", "—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª_–≤—ã–ø–æ–ª–Ω–µ–Ω",
                "–ø—Ä–æ–≥—Ä–µ—Å—Å_–ø–æ_—Ü–µ–ª–∏", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏_–Ω–∞_–¥–µ–Ω—å", "–¥–∏–Ω–∞–º–∏–∫–∞_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
                "–¥–∏–Ω–∞–º–∏–∫–∞_—ç–Ω–µ—Ä–≥–∏–∏", "–¥–∏–Ω–∞–º–∏–∫–∞_–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            ])
        
        try:
            sheet.worksheet("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–º–µ—Å—è—Ü–∞")
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–º–µ—Å—è—Ü–∞", rows=1000, cols=29)
            worksheet.append_row([
                "id_–∫–ª–∏–µ–Ω—Ç–∞", "telegram_username", "–∏–º—è", "–º–µ—Å—è—Ü",
                "—Å—Ä–µ–¥–Ω–µ–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Å—Ä–µ–¥–Ω–∏–π_—É—Ä–æ–≤–µ–Ω—å_–º–æ—Ç–∏–≤–∞—Ü–∏–∏",
                "–ø—Ä–æ—Ü–µ–Ω—Ç_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_–ø–ª–∞–Ω–æ–≤", "–ø—Ä–æ–≥—Ä–µ—Å—Å_–ø–æ_—Ü–µ–ª—è–º",
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∞–∫—Ç–∏–≤–Ω—ã—Ö_–¥–Ω–µ–π", "–¥–∏–Ω–∞–º–∏–∫–∞_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
                "–ø—Ä–æ—Ü–µ–Ω—Ç_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—É—Ç—Ä–µ–Ω–Ω–∏—Ö_—Ä–∏—Ç—É–∞–ª–æ–≤",
                "–ø—Ä–æ—Ü–µ–Ω—Ç_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_–≤–µ—á–µ—Ä–Ω–∏—Ö_—Ä–∏—Ç—É–∞–ª–æ–≤",
                "–æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", "–æ—Å–Ω–æ–≤–Ω—ã–µ_–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏_–º–µ—Å—è—Ü–∞",
                "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏_–Ω–∞_—Å–ª–µ–¥—É—é—â–∏–π_–º–µ—Å—è—Ü", "–∏—Ç–æ–≥–∏_–º–µ—Å—è—Ü–∞",
                "—Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å", "—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ª—é–±–∏–º—ã–µ_—Ä–∏—Ç—É–∞–ª—ã",
                "–¥–∏–Ω–∞–º–∏–∫–∞_—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ_—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
                "—É—Ä–æ–≤–µ–Ω—å_–≤_–Ω–∞—á–∞–ª–µ_–º–µ—Å—è—Ü–∞", "—É—Ä–æ–≤–µ–Ω—å_–≤_–∫–æ–Ω—Ü–µ_–º–µ—Å—è—Ü–∞",
                "–æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—á–∫–æ–≤", "—Å—Ä–µ–¥–Ω—è—è_–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            ])
        
        try:
            sheet.worksheet("–∞–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å")
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title="–∞–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å", rows=1000, cols=10)
            worksheet.append_row([
                "id_–∫–ª–∏–µ–Ω—Ç–∞", "telegram_username", "–∏–º—è", "—Ç–µ–∫—É—â–∏–π_—Å—Ç–∞—Ç—É—Å",
                "—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è", "–ø–æ—Å–ª–µ–¥–Ω—è—è_–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞",
                "—Å–ª–µ–¥—É—é—â–∏–π_—á–µ–∫–∞–ø", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–∑–∞–º–µ—Ç–∫–∏_–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
            ])
        
        logger.info("‚úÖ Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        return sheet
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

google_sheet = init_google_sheets()

# ========== –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–û–§–ò–õ–Ø ==========

def _safe_analyze_text(text: Optional[str]) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    return text.lower() if text else ""

def analyze_user_profile(user_id: int) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç–µ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT question_number, answer_text FROM questionnaire_answers WHERE user_id = %s", (user_id,))
            
            rows = cursor.fetchall()
            answers = {}
            
            for row in rows:
                answers[row['question_number']] = row['answer_text']
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            profile = {
                'user_id': user_id,
                'main_goal': answers.get(1, ''),
                'goal_motivation': answers.get(2, ''),
                'success_criteria': answers.get(3, ''),
                'daily_hours': extract_hours(answers.get(4, '')),
                'deadline_info': analyze_deadlines(answers.get(5, '')),
                'sleep_schedule': answers.get(6, ''),
                'daily_routine': answers.get(7, ''),
                'energy_peaks': answers.get(8, ''),
                'distraction_time': extract_hours(answers.get(9, '')),
                'burnout_frequency': answers.get(10, ''),
                'work_style': analyze_work_style(answers.get(11, '')),
                'focus_aids': analyze_focus_aids(answers.get(12, '')),
                'break_activities': analyze_break_activities(answers.get(13, '')),
                'activity_level': analyze_activity_level(answers.get(14, '')),
                'sport_preferences': answers.get(15, ''),
                'sport_schedule': answers.get(16, ''),
                'health_limitations': answers.get(17, ''),
                'eating_habits': answers.get(18, ''),
                'water_intake': analyze_water_intake(answers.get(19, '')),
                'diet_changes': answers.get(20, ''),
                'cooking_time': answers.get(21, ''),
                'sleep_quality': answers.get(22, ''),
                'motivation_triggers': analyze_motivation(answers.get(23, '')),
                'obstacles': analyze_obstacles(answers.get(24, '')),
                'stress_management': answers.get(25, ''),
                'rest_preferences': analyze_rest_preferences(answers.get(26, '')),
                'rest_frequency': answers.get(27, ''),
                'personal_rituals': answers.get(28, ''),
                'weekend_planning': answers.get(29, ''),
                'social_needs': answers.get(30, ''),
                'hobby_time': answers.get(31, ''),
                'health_rituals': answers.get(32, ''),
                'work_life_balance': answers.get(33, ''),
                'plan_obstacles': answers.get(34, ''),
                'contingency_planning': answers.get(35, ''),
                'personality_type': determine_personality_type(answers),
                'optimal_times': calculate_optimal_times(answers.get(6, ''), answers.get(8, ''))
            }
            
            return profile
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}

def analyze_work_style(answer: Optional[str]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é —Ä–∞–±–æ—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    safe_answer = _safe_analyze_text(answer)
    
    work_style = {
        'prefers_long_blocks': any(word in safe_answer for word in ['–¥–ª–∏–Ω–Ω—ã–µ', '–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ', '2-4 —á–∞—Å–∞']),
        'prefers_short_sessions': any(word in safe_answer for word in ['–∫–æ—Ä–æ—Ç–∫–∏–µ', '25-50 –º–∏–Ω—É—Ç', '–ø–æ–º–æ–¥–æ—Ä–æ']),
        'prefers_variety': any(word in safe_answer for word in ['—á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏']),
        'prefers_multitasking': '–º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å' in safe_answer,
        'focus_aids': []
    }
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º focus aids
    if '—Ç–∏—à–∏–Ω–∞' in safe_answer:
        work_style['focus_aids'].append('quiet_environment')
    if '–º—É–∑—ã–∫–∞' in safe_answer:
        work_style['focus_aids'].append('background_music')
    if '—Ç–∞–π–º–µ—Ä—ã' in safe_answer:
        work_style['focus_aids'].append('timers')
    if '–¥–µ–¥–ª–∞–π–Ω—ã' in safe_answer:
        work_style['focus_aids'].append('deadlines')
    
    return work_style

def analyze_focus_aids(answer: str) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è"""
    safe_answer = _safe_analyze_text(answer)
    aids = []
    if '—Ç–∏—à–∏–Ω–∞' in safe_answer:
        aids.append('quiet')
    if '–º—É–∑—ã–∫–∞' in safe_answer:
        aids.append('music')
    if '–∫–∞—Ñ–µ' in safe_answer:
        aids.append('cafe')
    if '—Ç–∞–π–º–µ—Ä—ã' in safe_answer:
        aids.append('timers')
    if '–¥–µ–¥–ª–∞–π–Ω—ã' in safe_answer:
        aids.append('deadlines')
    return aids

def analyze_break_activities(answer: str) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤"""
    safe_answer = _safe_analyze_text(answer)
    activities = []
    if '—Å–æ—Ü—Å–µ—Ç–∏' in safe_answer:
        activities.append('social_media')
    if '–ø—Ä–æ–≥—É–ª–∫–∞' in safe_answer:
        activities.append('walk')
    if '—Ä–∞—Å—Ç—è–∂–∫–∞' in safe_answer:
        activities.append('stretch')
    if '—á—Ç–µ–Ω–∏–µ' in safe_answer:
        activities.append('reading')
    if '–Ω–∏—á–µ–≥–æ' in safe_answer:
        activities.append('nothing')
    return activities

def analyze_activity_level(answer: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    safe_answer = _safe_analyze_text(answer)
    if '—Å–∏–¥—è—á–∏–π' in safe_answer:
        return 'sedentary'
    elif '–ø—Ä–æ–≥—É–ª–∫–∏' in safe_answer:
        return 'light'
    elif '1-2 —Ä–∞–∑–∞' in safe_answer:
        return 'moderate'
    elif '3+ —Ä–∞–∑–∞' in safe_answer:
        return 'active'
    return 'unknown'

def analyze_water_intake(answer: Optional[str]) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    if not answer:
        return 'unknown'
        
    if '1-2' in answer:
        return 'low'
    elif '4-5' in answer:
        return 'medium'
    elif '8+' in answer:
        return 'high'
    return 'unknown'

def analyze_motivation(answer: str) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    safe_answer = _safe_analyze_text(answer)
    triggers = []
    if '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' in safe_answer:
        triggers.append('achievement')
    if '–æ–¥–æ–±—Ä–µ–Ω–∏–µ' in safe_answer:
        triggers.append('recognition')
    if '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π' in safe_answer:
        triggers.append('intrinsic')
    if '–¥–µ–Ω—å–≥–∏' in safe_answer or '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' in safe_answer:
        triggers.append('extrinsic')
    return triggers

def analyze_obstacles(answer: str) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è"""
    safe_answer = _safe_analyze_text(answer)
    obstacles = []
    if '–ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è' in safe_answer:
        obstacles.append('procrastination')
    if '–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º' in safe_answer:
        obstacles.append('perfectionism')
    if '—ç–Ω–µ—Ä–≥–∏' in safe_answer:
        obstacles.append('low_energy')
    if '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü' in safe_answer:
        obstacles.append('disorganization')
    return obstacles

def analyze_rest_preferences(answer: str) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –æ—Ç–¥—ã—Ö—É"""
    safe_answer = _safe_analyze_text(answer)
    preferences = []
    if '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' in safe_answer:
        preferences.append('active_rest')
    if '–ø–∞—Å—Å–∏–≤–Ω—ã–π' in safe_answer:
        preferences.append('passive_rest')
    if '–æ–±—â–µ–Ω–∏–µ' in safe_answer:
        preferences.append('social_rest')
    if '—É–µ–¥–∏–Ω–µ–Ω–∏–µ' in safe_answer:
        preferences.append('solitude_rest')
    return preferences

def analyze_deadlines(answer: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏"""
    safe_answer = _safe_analyze_text(answer)
    deadline_info = {
        'has_deadline': False,
        'deadline_date': None,
        'milestones': [],
        'urgency_level': 'low'
    }
    
    if any(word in safe_answer for word in ['–Ω–µ–¥–µ–ª—è', '7 –¥–Ω–µ–π', '—Å—Ä–æ—á–Ω–æ']):
        deadline_info['urgency_level'] = 'high'
    elif any(word in safe_answer for word in ['–º–µ—Å—è—Ü', '30 –¥–Ω–µ–π']):
        deadline_info['urgency_level'] = 'medium'
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–ª–∏—á–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
    if any(word in safe_answer for word in ['–¥–µ–¥–ª–∞–π–Ω', '—Å—Ä–æ–∫', '–¥–æ', '–∫–æ–≥–¥–∞']):
        deadline_info['has_deadline'] = True
    
    return deadline_info

def extract_hours(text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    match = re.search(r'(\d+)\s*—á–∞—Å', text)
    if match:
        return int(match.group(1))
    return None

def determine_personality_type(answers: Dict[int, str]) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤"""
    score = 0
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è —Ä–∞–±–æ—Ç—ã
    work_answer = _safe_analyze_text(answers.get(11, ""))
    if '–¥–ª–∏–Ω–Ω—ã–µ' in work_answer:
        score += 2
    if '–º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å' in work_answer:
        score -= 1
    
    # –ê–Ω–∞–ª–∏–∑ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    motivation_answer = _safe_analyze_text(answers.get(23, ""))
    if '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π' in motivation_answer:
        score += 1
    if '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' in motivation_answer:
        score += 2
    
    if score >= 4:
        return "deep_focus"
    elif score >= 2:
        return "balanced"
    elif score >= 0:
        return "varied"
    else:
        return "dynamic"

def calculate_optimal_times(sleep_answer: str, energy_answer: str) -> Dict[str, str]:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    safe_sleep_answer = _safe_analyze_text(sleep_answer)
    safe_energy_answer = _safe_analyze_text(energy_answer)
    
    wake_time = "08:00"
    if any(word in safe_sleep_answer for word in ['5', '6']):
        wake_time = "07:00"
    elif any(word in safe_sleep_answer for word in ['9', '10']):
        wake_time = "09:00"
    
    if '—É—Ç—Ä–æ' in safe_energy_answer:
        deep_work_start = "09:00"
    elif '–¥–µ–Ω—å' in safe_energy_answer:
        deep_work_start = "13:00"
    else:
        deep_work_start = "10:00"
    
    return {
        'wake_up': wake_time,
        'deep_work_start': deep_work_start,
        'creative_work': "15:00",
        'learning_time': "11:00",
        'physical_activity': "18:00",
        'planning_time': "20:00"
    }

# ========== –°–ò–°–¢–ï–ú–ê –®–ê–ë–õ–û–ù–û–í –ò –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò ==========

def create_personalized_template(template_key: str, user_profile: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    base_template = PLAN_TEMPLATES[template_key].copy()
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
    personality = user_profile['personality_type']
    if personality == "deep_focus":
        base_template = adapt_for_deep_focus(base_template, user_profile)
    elif personality == "dynamic":
        base_template = adapt_for_dynamic(base_template, user_profile)
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ü–µ–ª–∏
    goal_type = user_profile['goal_analysis']['type'] if 'goal_analysis' in user_profile else "unknown"
    if goal_type == "project":
        base_template = adapt_for_project_goal(base_template, user_profile)
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–∞–±–æ—á–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    base_template = adapt_work_blocks(base_template, user_profile)
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    base_template = adapt_energy_patterns(base_template, user_profile)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    base_template = add_personalized_advice(base_template, user_profile)
    
    return base_template

def adapt_for_deep_focus(template: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if 'time_blocks' in template:
        new_blocks = []
        for block in template['time_blocks']:
            if '—Ä–∞–±–æ—Ç–∞' in block.lower() or '–∑–∞–¥–∞—á' in block.lower():
                block = block.replace('1 —á–∞—Å', '2 —á–∞—Å–∞').replace('60 –º–∏–Ω—É—Ç', '120 –º–∏–Ω—É—Ç')
            new_blocks.append(block)
        template['time_blocks'] = new_blocks
    
    if 'advice' in template:
        template['advice'].extend([
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É '–≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã' - –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π",
            "–û—Ç–∫–ª—é—á–∞–π—Ç–µ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏—Ö –±–ª–æ–∫–æ–≤"
        ])
    
    return template

def adapt_for_dynamic(template: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if 'time_blocks' in template:
        new_blocks = []
        for block in template['time_blocks']:
            if '—Ä–∞–±–æ—Ç–∞' in block.lower() and '2 —á–∞—Å–∞' in block:
                time_part = block.split(' - ')[0]
                task_part = block.split(' - ')[1]
                new_blocks.extend([
                    f"{time_part} - {task_part} (—Å–µ—Å—Å–∏—è 1)",
                    f"{add_30_min(time_part)} - {task_part} (—Å–µ—Å—Å–∏—è 2)",
                    f"{add_30_min(add_30_min(time_part))} - –ü–µ—Ä–µ—Ä—ã–≤ 10 –º–∏–Ω"
                ])
            else:
                new_blocks.append(block)
        template['time_blocks'] = new_blocks
    
    return template

def adapt_work_blocks(template: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–µ –±–ª–æ–∫–∏ –ø–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    work_style = profile.get('work_style', {})
    optimal_times = profile.get('optimal_times', {})
    
    if 'time_blocks' in template and optimal_times:
        new_blocks = []
        
        for block in template['time_blocks']:
            if '–≥–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞' in block.lower():
                block = block.replace('09:00', optimal_times.get('deep_work_start', '09:00'))
            new_blocks.append(block)
        
        template['time_blocks'] = new_blocks
    
    return template

def adapt_energy_patterns(template: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–æ–¥ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    energy_level = profile.get('energy_level', 'medium')
    
    if energy_level == 'low':
        if 'time_blocks' in template:
            enhanced_blocks = []
            for i, block in enumerate(template['time_blocks']):
                enhanced_blocks.append(block)
                if '—Ä–∞–±–æ—Ç–∞' in block.lower() and i < len(template['time_blocks']) - 1:
                    enhanced_blocks.append("–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ 5-10 –º–∏–Ω—É—Ç - —Ä–∞–∑–º—è—Ç—å—Å—è, –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã")
            template['time_blocks'] = enhanced_blocks
    
    return template

def add_personalized_advice(template: Dict[str, Any], profile: Dict[str, Any]) -> Dict[str, Any]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"""
    obstacles = profile.get('obstacles', [])
    motivation_triggers = profile.get('motivation_triggers', [])
    
    if 'advice' not in template:
        template['advice'] = []
    
    if 'procrastination' in obstacles:
        template['advice'].append("–ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π –∑–∞–¥–∞—á–∏ - –ø—Ä–∏–Ω—Ü–∏–ø '2 –º–∏–Ω—É—Ç'")
    
    if 'perfectionism' in obstacles:
        template['advice'].append("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ, –ø–æ—Ç–æ–º —É–ª—É—á—à–∞–π—Ç–µ - –ø—Ä–∏–Ω—Ü–∏–ø '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ'")
    
    if 'achievement' in motivation_triggers:
        template['advice'].append("–û—Ç–º–µ—á–∞–π—Ç–µ –∫–∞–∂–¥–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
    
    return template

def add_30_min(time_str: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç 30 –º–∏–Ω—É—Ç –∫ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time_obj = datetime.strptime(time_str, "%H:%M")
        new_time = time_obj + timedelta(minutes=30)
        return new_time.strftime("%H:%M")
    except:
        return time_str

def save_daily_plan_to_sheets(user_id: int, date: str, plan: Dict[str, Any]) -> bool:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤ Google Sheets"""
    logger.info(f"üìù –ü–ª–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {date} –≥–æ—Ç–æ–≤ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é")
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    return True

def generate_highly_personalized_plan(user_id: int, date: str, template_key: str = None) -> bool:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = analyze_user_profile(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω
        if not template_key:
            day_name = datetime.strptime(date, "%Y-%m-%d").strftime("%A").lower()
            day_translation = {
                'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'wednesday': '—Å—Ä–µ–¥–∞',
                'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'saturday': '—Å—É–±–±–æ—Ç–∞', 'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            russian_day = day_translation.get(day_name, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            template_key = WEEKLY_TEMPLATE_SCHEDULE.get(russian_day, "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π_–¥–µ–Ω—å")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        personalized_plan = create_personalized_template(template_key, user_profile)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω
        goal_text = user_profile.get('main_goal', '')
        if goal_text and goal_text != "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞":
            if 'strategic_tasks' in personalized_plan:
                personalized_plan['strategic_tasks'].insert(0, f"–î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏: {goal_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        success = save_daily_plan_to_sheets(user_id, date, personalized_plan)
        
        if success:
            logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è {user_id} –Ω–∞ {date}")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}")
        return False

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========

def save_user_info(user_id: int, username: str, first_name: str, last_name: Optional[str] = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            registration_date = datetime.now()
            
            cursor.execute('''INSERT INTO clients 
                             (user_id, username, first_name, last_name, status, registration_date, last_activity) 
                             VALUES (%s, %s, %s, %s, %s, %s, %s)
                             ON CONFLICT (user_id) DO UPDATE SET
                             username = EXCLUDED.username,
                             first_name = EXCLUDED.first_name,
                             last_name = EXCLUDED.last_name,
                             last_activity = EXCLUDED.last_activity''',
                          (user_id, username, first_name, last_name, 'active', registration_date, registration_date))
            
            conn.commit()
            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            last_activity = datetime.now()
            
            cursor.execute('''UPDATE clients SET last_activity = %s WHERE user_id = %s''',
                          (last_activity, user_id))
            
            conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {user_id}: {e}")

def check_user_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT user_id FROM clients WHERE user_id = %s", (user_id,))
            
            result = cursor.fetchone()
            return result is not None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {user_id}: {e}")
        return False

def save_questionnaire_answer(user_id: int, question_number: int, question_text: str, answer_text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            answer_date = datetime.now()
            
            cursor.execute('''INSERT INTO questionnaire_answers 
                             (user_id, question_number, question_text, answer_text, answer_date) 
                             VALUES (%s, %s, %s, %s, %s)
                             ON CONFLICT (user_id, question_number) 
                             DO UPDATE SET 
                                answer_text = EXCLUDED.answer_text,
                                answer_date = EXCLUDED.answer_date''',
                          (user_id, question_number, question_text, answer_text, answer_date))
            
            conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ {user_id}: {e}")

def save_message(user_id: int, message_text: str, direction: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            created_at = datetime.now()
            
            cursor.execute('''INSERT INTO user_messages 
                             (user_id, message_text, direction, created_at) 
                             VALUES (%s, %s, %s, %s)''',
                          (user_id, message_text, direction, created_at))
            
            conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

def save_user_plan_to_db(user_id: int, plan_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            created_date = datetime.now()
            
            cursor.execute('''INSERT INTO user_plans 
                             (user_id, plan_date, morning_ritual1, morning_ritual2, task1, task2, task3, task4, 
                              lunch_break, evening_ritual1, evening_ritual2, advice, sleep_time, water_goal, 
                              activity_goal, created_date) 
                             VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)''',
                          (user_id, plan_data.get('plan_date'), plan_data.get('morning_ritual1'), 
                           plan_data.get('morning_ritual2'), plan_data.get('task1'), plan_data.get('task2'),
                           plan_data.get('task3'), plan_data.get('task4'), plan_data.get('lunch_break'),
                           plan_data.get('evening_ritual1'), plan_data.get('evening_ritual2'), 
                           plan_data.get('advice'), plan_data.get('sleep_time'), plan_data.get('water_goal'),
                           plan_data.get('activity_goal'), created_date))
            
            conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ {user_id}: {e}")

def get_user_plan_from_db(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''SELECT * FROM user_plans 
                             WHERE user_id = %s AND status = 'active' 
                             ORDER BY created_date DESC LIMIT 1''', (user_id,))
            
            plan = cursor.fetchone()
            return plan
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ {user_id}: {e}")
        return None

def save_progress_to_db(user_id: int, progress_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            progress_date = datetime.now().date()
            
            cursor.execute('''INSERT INTO user_progress 
                             (user_id, progress_date, tasks_completed, mood, energy, sleep_quality, 
                              water_intake, activity_done, user_comment, day_rating, challenges) 
                             VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)''',
                          (user_id, progress_date, progress_data.get('tasks_completed'), 
                           progress_data.get('mood'), progress_data.get('energy'), 
                           progress_data.get('sleep_quality'), progress_data.get('water_intake'),
                           progress_data.get('activity_done'), progress_data.get('user_comment'),
                           progress_data.get('day_rating'), progress_data.get('challenges')))
            
            conn.commit()
            logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {user_id}: {e}")

def get_user_stats(user_id: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM user_messages WHERE user_id = %s AND direction = 'incoming'", (user_id,))
            messages_count_result = cursor.fetchone()
            messages_count = messages_count_result['count'] if messages_count_result else 0
            
            cursor.execute("SELECT registration_date FROM clients WHERE user_id = %s", (user_id,))
            reg_date_result = cursor.fetchone()
            reg_date = reg_date_result['registration_date'] if reg_date_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            return {
                'messages_count': messages_count,
                'registration_date': reg_date
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {user_id}: {e}")
        return {'messages_count': 0, 'registration_date': '–û—à–∏–±–∫–∞'}

def has_sufficient_data(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–∏–Ω–∏–º—É–º 3 –¥–Ω—è) –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(DISTINCT progress_date) FROM user_progress WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            count = result['count'] if result else 0
            
            return count >= 3
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö {user_id}: {e}")
        return False

def get_user_activity_streak(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT DISTINCT progress_date FROM user_progress WHERE user_id = %s ORDER BY progress_date DESC", (user_id,))
            dates_result = cursor.fetchall()
            dates = [row['progress_date'] for row in dates_result if row['progress_date']]
            
            if not dates:
                return 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            dates.sort(reverse=True)
            streak = 0
            today = datetime.now().date()
            
            for i, date in enumerate(dates):
                expected_date = today - timedelta(days=i)
                if date == expected_date:
                    streak += 1
                else:
                    break
            
            return streak
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏ {user_id}: {e}")
        return 0

def get_user_main_goal(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–Ω–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT answer_text FROM questionnaire_answers WHERE user_id = %s AND question_number = 1", (user_id,))
            result = cursor.fetchone()
            return result['answer_text'] if result else "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–∏ {user_id}: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–∏"

def get_user_level_info(user_id: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(DISTINCT progress_date) FROM user_progress WHERE user_id = %s", (user_id,))
            active_days_result = cursor.fetchone()
            active_days = active_days_result['count'] if active_days_result else 0
            
            cursor.execute("SELECT SUM(tasks_completed) FROM user_progress WHERE user_id = %s", (user_id,))
            total_tasks_result = cursor.fetchone()
            total_tasks = total_tasks_result['sum'] if total_tasks_result else 0
            
            level_points = active_days * 10 + total_tasks * 2
            level_names = {
                0: "–ù–æ–≤–∏—á–æ–∫",
                50: "–£—á–µ–Ω–∏–∫", 
                100: "–û–ø—ã—Ç–Ω—ã–π",
                200: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
                500: "–ú–∞—Å—Ç–µ—Ä"
            }
            
            current_level = "–ù–æ–≤–∏—á–æ–∫"
            next_level_points = 50
            points_to_next = 50
            
            for points, level in sorted(level_names.items()):
                if level_points >= points:
                    current_level = level
                else:
                    next_level_points = points
                    points_to_next = points - level_points
                    break
            
            return {
                'level': current_level,
                'points': level_points,
                'points_to_next': points_to_next,
                'next_level_points': next_level_points
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è {user_id}: {e}")
        return {'level': '–ù–æ–≤–∏—á–æ–∫', 'points': 0, 'points_to_next': 50, 'next_level_points': 50}

def get_favorite_ritual(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—é–±–∏–º—ã–π —Ä–∏—Ç—É–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT answer_text FROM questionnaire_answers WHERE user_id = %s AND question_number = 32", (user_id,))
            result = cursor.fetchone()
            
            if result:
                rituals_text = result['answer_text'].lower() if result['answer_text'] else ""
                
                if "–º–µ–¥–∏—Ç–∞—Ü–∏—è" in rituals_text:
                    return "–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è"
                elif "–∑–∞—Ä—è–¥–∫–∞" in rituals_text or "—Ä–∞—Å—Ç—è–∂–∫–∞" in rituals_text:
                    return "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
                elif "—á—Ç–µ–Ω–∏–µ" in rituals_text:
                    return "–í–µ—á–µ—Ä–Ω–µ–µ —á—Ç–µ–Ω–∏–µ"
                elif "–¥–Ω–µ–≤–Ω–∏–∫" in rituals_text:
                    return "–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞"
                elif "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in rituals_text:
                    return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"
            
            return "–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞ {user_id}: {e}")
        return "–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"

def get_user_usage_days(user_id: int) -> Dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT registration_date FROM clients WHERE user_id = %s", (user_id,))
            reg_result = cursor.fetchone()
            
            if not reg_result:
                return {'days_since_registration': 0, 'active_days': 0, 'current_day': 0, 'current_streak': 0}
            
            reg_date = reg_result['registration_date'].date()
            days_since_registration = (datetime.now().date() - reg_date).days + 1
            
            cursor.execute("SELECT COUNT(DISTINCT progress_date) FROM user_progress WHERE user_id = %s", (user_id,))
            active_days_result = cursor.fetchone()
            active_days = active_days_result['count'] if active_days_result else 0
            
            current_streak = get_user_activity_streak(user_id)
            
            return {
                'days_since_registration': days_since_registration,
                'active_days': active_days,
                'current_day': active_days if active_days > 0 else 1,
                'current_streak': current_streak
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {user_id}: {e}")
        return {'days_since_registration': 0, 'active_days': 0, 'current_day': 0, 'current_streak': 0}

# ========== GOOGLE SHEETS –§–£–ù–ö–¶–ò–ò ==========

def save_client_to_sheets(user_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Sheets"""
    if not google_sheet:
        logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        worksheet = google_sheet.worksheet("–∫–ª–∏–µ–Ω—Ç—ã_–¥–µ—Ç–∞–ª–∏")
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        try:
            cell = worksheet.find(str(user_data['user_id']))
            row = cell.row
            worksheet.update(f'A{row}:Y{row}', [[
                user_data['user_id'],
                user_data.get('telegram_username', ''),
                user_data.get('first_name', ''),
                user_data.get('start_date', datetime.now().strftime("%Y-%m-%d")),
                user_data.get('wake_time', ''),
                user_data.get('sleep_time', ''),
                user_data.get('activity_preferences', ''),
                user_data.get('diet_features', ''),
                user_data.get('rest_preferences', ''),
                user_data.get('morning_rituals', ''),
                user_data.get('evening_rituals', ''),
                user_data.get('personal_habits', ''),
                user_data.get('medications', ''),
                user_data.get('development_goals', ''),
                user_data.get('main_goal', ''),
                user_data.get('special_notes', ''),
                user_data.get('last_activity', datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
                'active',
                user_data.get('—Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å', '–ù–æ–≤–∏—á–æ–∫'),
                user_data.get('–æ—á–∫–∏_–æ–ø—ã—Ç–∞', '0'),
                user_data.get('—Ç–µ–∫—É—â–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '0'),
                user_data.get('–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '0'),
                user_data.get('–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª', ''),
                user_data.get('–¥–∞—Ç–∞_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–∞', datetime.now().strftime("%Y-%m-%d")),
                user_data.get('–±–ª–∏–∂–∞–π—à–∞—è_—Ü–µ–ª—å', '')
            ]])
        except Exception:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            worksheet.append_row([
                user_data['user_id'],
                user_data.get('telegram_username', ''),
                user_data.get('first_name', ''),
                user_data.get('start_date', datetime.now().strftime("%Y-%m-%d")),
                user_data.get('wake_time', ''),
                user_data.get('sleep_time', ''),
                user_data.get('activity_preferences', ''),
                user_data.get('diet_features', ''),
                user_data.get('rest_preferences', ''),
                user_data.get('morning_rituals', ''),
                user_data.get('evening_rituals', ''),
                user_data.get('personal_habits', ''),
                user_data.get('medications', ''),
                user_data.get('development_goals', ''),
                user_data.get('main_goal', ''),
                user_data.get('special_notes', ''),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'active',
                user_data.get('—Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å', '–ù–æ–≤–∏—á–æ–∫'),
                user_data.get('–æ—á–∫–∏_–æ–ø—ã—Ç–∞', '0'),
                user_data.get('—Ç–µ–∫—É—â–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '0'),
                user_data.get('–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '0'),
                user_data.get('–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª', ''),
                datetime.now().strftime("%Y-%m-%d"),
                user_data.get('–±–ª–∏–∂–∞–π—à–∞—è_—Ü–µ–ª—å', '')
            ])
        
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {user_data['user_id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Sheets: {e}")
        return False

def format_enhanced_plan(plan_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    plan_text = f"üèÅ {plan_data.get('name', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω')}\n\n"
    plan_text += f"üìù {plan_data.get('description', '')}\n\n"
    
    if plan_data.get('strategic_tasks'):
        plan_text += "üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
        for i, task in enumerate(plan_data['strategic_tasks'], 1):
            plan_text += f"{i}Ô∏è‚É£ {task}\n"
        plan_text += "\n"
    
    if plan_data.get('critical_tasks'):
        plan_text += "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
        for i, task in enumerate(plan_data['critical_tasks'], 1):
            plan_text += f"üî¥ {task}\n"
        plan_text += "\n"
    
    if plan_data.get('priorities'):
        plan_text += "üéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –î–ù–Ø:\n"
        for priority in plan_data['priorities']:
            plan_text += f"‚≠ê {priority}\n"
        plan_text += "\n"
    
    if plan_data.get('time_blocks'):
        plan_text += "‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ë–õ–û–ö–ò:\n"
        for block in plan_data['time_blocks']:
            plan_text += f"üïí {block}\n"
        plan_text += "\n"
    
    if plan_data.get('advice'):
        plan_text += "üí° –°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
        for advice in plan_data['advice']:
            plan_text += f"üí´ {advice}\n"
        plan_text += "\n"
    
    if plan_data.get('motivation_quote'):
        plan_text += f"üí´ –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–ê–Ø –¶–ò–¢–ê–¢–ê:\n{plan_data['motivation_quote']}\n"
    
    return plan_text.strip()

def save_daily_report_to_sheets(user_id: int, report_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Google Sheets"""
    if not google_sheet:
        logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        worksheet = google_sheet.worksheet("–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã")
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT username, first_name FROM clients WHERE user_id = %s", (user_id,))
            user_info = cursor.fetchone()
        
        username = user_info['username'] if user_info and user_info['username'] else ""
        first_name = user_info['first_name'] if user_info and user_info['first_name'] else ""
        
        worksheet.append_row([
            user_id,
            username,
            first_name,
            report_data.get('date', datetime.now().strftime("%Y-%m-%d")),
            report_data.get('strategic_tasks_done', ''),
            report_data.get('morning_rituals_done', ''),
            report_data.get('evening_rituals_done', ''),
            report_data.get('mood', ''),
            report_data.get('energy', ''),
            report_data.get('focus_level', ''),
            report_data.get('motivation_level', ''),
            report_data.get('problems', ''),
            report_data.get('questions', ''),
            report_data.get('what_went_well', ''),
            report_data.get('key_achievements', ''),
            report_data.get('what_to_improve', ''),
            report_data.get('adjustments', ''),
            report_data.get('water_intake', ''),
            report_data.get('day_status', ''),
            report_data.get('—É—Ä–æ–≤–µ–Ω—å_–¥–Ω—è', ''),
            report_data.get('—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', ''),
            report_data.get('–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª_–≤—ã–ø–æ–ª–Ω–µ–Ω', ''),
            report_data.get('–ø—Ä–æ–≥—Ä–µ—Å—Å_–ø–æ_—Ü–µ–ª–∏', ''),
            report_data.get('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏_–Ω–∞_–¥–µ–Ω—å', ''),
            report_data.get('–¥–∏–Ω–∞–º–∏–∫–∞_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', ''),
            report_data.get('–¥–∏–Ω–∞–º–∏–∫–∞_—ç–Ω–µ—Ä–≥–∏–∏', ''),
            report_data.get('–¥–∏–Ω–∞–º–∏–∫–∞_–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '')
        ])
        
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def get_daily_plan_from_sheets(user_id: int, date: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏–∑ Google Sheets"""
    if not google_sheet:
        logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return {}
    
    try:
        worksheet = google_sheet.worksheet("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_–ø–ª–∞–Ω—ã_–º–µ—Å—è—Ü")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cell = worksheet.find(str(user_id))
            row = cell.row
        except Exception:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Google Sheets")
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        row_data = worksheet.row_values(row)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
        day = datetime.strptime(date, "%Y-%m-%d").day
        date_column_index = 4 + day - 1  # 4 –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ + –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        
        if date_column_index >= len(row_data):
            logger.warning(f"‚ö†Ô∏è –î–ª—è –¥–∞—Ç—ã {date} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets")
            return {}
        
        plan_text = row_data[date_column_index]
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞
        plan_data = parse_structured_plan(plan_text)
        
        return plan_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
        return {}

def parse_structured_plan(plan_text: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    if not plan_text:
        return {}
    
    sections = {
        'strategic_tasks': [],
        'critical_tasks': [],
        'priorities': [],
        'advice': [],
        'special_rituals': [],
        'time_blocks': [],
        'resources': [],
        'expected_results': [],
        'reminders': [],
        'motivation_quote': ''
    }
    
    current_section = None
    
    for line in plan_text.split('\n'):
        line = line.strip()
        
        if not line:
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
        if '–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:' in line:
            current_section = 'strategic_tasks'
            continue
        elif '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:' in line:
            current_section = 'critical_tasks'
            continue
        elif '–ü–†–ò–û–†–ò–¢–ï–¢–´ –î–ù–Ø:' in line:
            current_section = 'priorities'
            continue
        elif '–°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:' in line:
            current_section = 'advice'
            continue
        elif '–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –†–ò–¢–£–ê–õ–´:' in line:
            current_section = 'special_rituals'
            continue
        elif '–í–†–ï–ú–ï–ù–ù–´–ï –ë–õ–û–ö–ò:' in line:
            current_section = 'time_blocks'
            continue
        elif '–†–ï–°–£–†–°–´ –ò –ú–ê–¢–ï–†–ò–ê–õ–´:' in line:
            current_section = 'resources'
            continue
        elif '–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:' in line:
            current_section = 'expected_results'
            continue
        elif '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:' in line:
            current_section = 'reminders'
            continue
        elif '–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–ê—è –¶–ò–¢–ê–¢–ê:' in line:
            current_section = 'motivation_quote'
            continue
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
        if current_section and line.startswith('- '):
            content = line[2:].strip()
            if current_section == 'motivation_quote':
                sections[current_section] = content
            else:
                sections[current_section].append(content)
    
    return sections

# ========== –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========

def parse_time_input(time_text: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    time_text = time_text.lower().strip()
    
    logger.info(f"üïí –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è: {time_text}")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    time_mapping = {
        '—É—Ç—Ä–æ–º': '08:00',
        '—É—Ç—Ä–æ': '08:00', 
        '—É—Ç—Ä–∞': '08:00',
        '–¥–Ω–µ–º': '13:00',
        '–¥–µ–Ω—å': '13:00',
        '–≤–µ—á–µ—Ä–æ–º': '20:00',
        '–≤–µ—á–µ—Ä': '20:00',
        '–Ω–æ—á—å—é': '22:00',
        '–Ω–æ—á—å': '22:00',
        '–≤ –æ–±–µ–¥': '13:00',
        '–ø–µ—Ä–µ–¥ —Å–Ω–æ–º': '22:00',
        '–ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã': '18:00',
        '–≤ –ø–æ–ª–¥–µ–Ω—å': '12:00'
    }
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º (14:30, 9:00)
    exact_time_match = re.search(r'(\d{1,2}):(\d{2})', time_text)
    if exact_time_match:
        hours = int(exact_time_match.group(1))
        minutes = int(exact_time_match.group(2))
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            time_str = f"{hours:02d}:{minutes:02d}"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
            return {'time': time_str, 'type': 'exact'}
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "11 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞", "7 —É—Ç—Ä–∞", "3 –Ω–æ—á–∏"
    hour_time_match = re.search(r'(\d{1,2})\s*(?:—á–∞—Å\w*)?\s*(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏|–¥–Ω—è)', time_text)
    if hour_time_match:
        hour = int(hour_time_match.group(1))
        period = hour_time_match.group(2)
        
        if period == '—É—Ç—Ä–∞':
            if 1 <= hour <= 12:
                time_str = f"{hour:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è —É—Ç—Ä–∞: {time_str}")
                return {'time': time_str, 'type': '12h'}
        elif period == '–≤–µ—á–µ—Ä–∞':
            if 1 <= hour <= 11:
                time_str = f"{hour + 12:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–∞: {time_str}")
                return {'time': time_str, 'type': '12h'}
            elif hour == 12:
                time_str = "12:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–∞: {time_str}")
                return {'time': time_str, 'type': '12h'}
        elif period == '–Ω–æ—á–∏':
            if 1 <= hour <= 11:
                time_str = f"{hour + 12:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –Ω–æ—á–∏: {time_str}")
                return {'time': time_str, 'type': '12h'}
            elif hour == 12:
                time_str = "00:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –Ω–æ—á–∏: {time_str}")
                return {'time': time_str, 'type': '12h'}
        elif period == '–¥–Ω—è':
            if 1 <= hour <= 11:
                time_str = f"{hour + 12:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –¥–Ω—è: {time_str}")
                return {'time': time_str, 'type': '12h'}
            elif hour == 12:
                time_str = "12:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –¥–Ω—è: {time_str}")
                return {'time': time_str, 'type': '12h'}
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã "11 –≤–µ—á–µ—Ä–∞", "7 —É—Ç—Ä–∞" (–±–µ–∑ —Å–ª–æ–≤–∞ "—á–∞—Å")
    simple_time_match = re.search(r'(\d{1,2})\s+(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏)', time_text)
    if simple_time_match:
        hour = int(simple_time_match.group(1))
        period = simple_time_match.group(2)
        
        if period == '—É—Ç—Ä–∞' and 1 <= hour <= 12:
            time_str = f"{hour:02d}:00"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è —É—Ç—Ä–∞: {time_str}")
            return {'time': time_str, 'type': 'simple'}
        elif period == '–≤–µ—á–µ—Ä–∞' and 1 <= hour <= 11:
            time_str = f"{hour + 12:02d}:00"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–∞: {time_str}")
            return {'time': time_str, 'type': 'simple'}
        elif period == '–Ω–æ—á–∏' and 1 <= hour <= 11:
            time_str = f"{hour + 12:02d}:00"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è –Ω–æ—á–∏: {time_str}")
            return {'time': time_str, 'type': 'simple'}
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—É—Ç—Ä–æ–º, –≤–µ—á–µ—Ä–æ–º –∏ —Ç.–¥.)
    if time_text in time_mapping:
        time_str = time_mapping[time_text]
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
        return {'time': time_str, 'type': 'relative'}
    
    # 5. üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: "—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç" - –¢–û–õ–¨–ö–û –î–õ–Ø –†–ê–ó–û–í–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
    future_match = re.search(r'—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)', time_text)
    if future_match:
        amount = int(future_match.group(1))
        unit = future_match.group(2)
        
        now = datetime.now()
        if '—á–∞—Å' in unit:
            future_time = now + timedelta(hours=amount)
        else:
            future_time = now + timedelta(minutes=amount)
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –û–¢–õ–û–ñ–ï–ù–ù–´–ú –í–†–ï–ú–ï–ù–ï–ú
        time_str = future_time.strftime("%H:%M")
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è: {time_str} (—á–µ—Ä–µ–∑ {amount} {unit})")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
        return {
            'time': time_str, 
            'type': 'future_relative',
            'delay_minutes': amount * (60 if '—á–∞—Å' in unit else 1),
            'original_text': time_text
        }
    
    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è: {time_text}")
    return None

def detect_reminder_type(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É"""
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞)
    regular_keywords = [
        '–∫–∞–∂–¥—ã–π', '–∫–∞–∂–¥–æ–µ', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '–∫–∞–∂–¥—É—é', 
        '–Ω–∞–ø–æ–º–∏–Ω–∞–π'  # "–Ω–∞–ø–æ–º–∏–Ω–∞–π" - –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö
    ]
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_keywords = [
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    for keyword in regular_keywords:
        # –ò—â–µ–º —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞
        if re.search(r'\b' + re.escape(keyword) + r'\b', text_lower):
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {keyword}")
            return 'regular'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    for day in days_keywords:
        if day in text_lower:
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day}")
            return 'regular'
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ - —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    logger.info("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    return 'once'

def parse_reminder_text(text: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    original_text = text
    text_lower = text.lower()
    
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {text}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_type = detect_reminder_type(text_lower)
    logger.info(f"üìù –¢–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_type}")
    
    # üîß –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –¥–ª—è "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç" –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if re.search(r'—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)', text_lower):
        reminder_type = 'once'
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø 'once' –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—ã")
    
    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    clean_text = text_lower
    
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_words = ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π', '–º–Ω–µ']
    for word in reminder_words:
        clean_text = re.sub(r'\b' + re.escape(word) + r'\b', '', clean_text)
    
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
    if reminder_type == 'once':
        regular_words = ['–∫–∞–∂–¥—ã–π', '–∫–∞–∂–¥–æ–µ', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '–∫–∞–∂–¥—É—é']
        for word in regular_words:
            clean_text = re.sub(r'\b' + re.escape(word) + r'\b', '', clean_text)
    
    clean_text = clean_text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    time_data = parse_time_input(clean_text)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    if not time_data:
        time_data = parse_time_input(original_text)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not time_data:
        time_data = {'time': '09:00', 'type': 'default'}
        logger.warning("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 09:00")
    
    # üîß –ü–ï–†–ï–ù–û–°–ò–ú –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ time_data –≤ reminder_data
    reminder_data = {
        'type': reminder_type,
        'time': time_data['time'],
        'text': '',
        'days': [],
        'original_text': original_text
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ time_data
    if 'delay_minutes' in time_data:
        reminder_data['delay_minutes'] = time_data['delay_minutes']
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ)
    if reminder_type == 'regular' and 'delay_minutes' not in time_data:
        days_map = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–Ω', '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç', '—Å—Ä–µ–¥–∞': '—Å—Ä', '—Å—Ä–µ–¥—É': '—Å—Ä',
            '—á–µ—Ç–≤–µ—Ä–≥': '—á—Ç', '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—Ç', '–ø—è—Ç–Ω–∏—Ü—É': '–ø—Ç', 
            '—Å—É–±–±–æ—Ç–∞': '—Å–±', '—Å—É–±–±–æ—Ç—É': '—Å–±', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–≤—Å',
            '–ø–Ω': '–ø–Ω', '–≤—Ç': '–≤—Ç', '—Å—Ä': '—Å—Ä', '—á—Ç': '—á—Ç', '–ø—Ç': '–ø—Ç', '—Å–±': '—Å–±', '–≤—Å': '–≤—Å'
        }
        
        for day_full, day_short in days_map.items():
            if day_full in text_lower:
                reminder_data['days'].append(day_short)
                # –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å –∏–∑ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                clean_text = re.sub(r'\b' + re.escape(day_full) + r'\b', '', clean_text)
        
        # –ï—Å–ª–∏ –¥–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –Ω–æ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –∑–Ω–∞—á–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        if not reminder_data['days'] and reminder_type == 'regular':
            reminder_data['days'] = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
            logger.info("üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    reminder_text = re.sub(r'\s+', ' ', clean_text).strip()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤
    if not reminder_text:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        temp_text = text_lower
        for word in ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π', '–º–Ω–µ']:
            temp_text = re.sub(r'\b' + re.escape(word) + r'\b', '', temp_text)
        reminder_text = re.sub(r'\s+', ' ', temp_text).strip()
    
    reminder_data['text'] = reminder_text
    
    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: –≤—Ä–µ–º—è={reminder_data['time']}, —Ç–µ–∫—Å—Ç={reminder_text}, —Ç–∏–ø={reminder_type}, –¥–Ω–∏={reminder_data['days']}")
    
    return reminder_data

def add_reminder_to_db(user_id: int, reminder_data: Dict[str, Any]) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # üîß –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
            if reminder_data.get('type') == 'once' and 'delay_minutes' in reminder_data:
                # –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
                from datetime import datetime, timedelta
                reminder_time = (datetime.now() + timedelta(minutes=reminder_data['delay_minutes'])).strftime("%H:%M")
            else:
                reminder_time = reminder_data['time']
            
            days_str = ','.join(reminder_data['days']) if reminder_data['days'] else '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
            created_date = datetime.now()
            
            cursor.execute('''INSERT INTO user_reminders 
                             (user_id, reminder_text, reminder_time, days_of_week, reminder_type, created_date)
                             VALUES (%s, %s, %s, %s, %s, %s)''',
                          (user_id, reminder_data['text'], reminder_time, 
                           days_str, reminder_data['type'], created_date))
            
            conn.commit()
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {reminder_time}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False
    
def get_user_reminders(user_id: int) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''SELECT id, reminder_text, reminder_time, days_of_week, reminder_type 
                             FROM user_reminders 
                             WHERE user_id = %s AND is_active = TRUE 
                             ORDER BY created_date DESC''', (user_id,))
            
            reminders = []
            for row in cursor.fetchall():
                reminders.append({
                    'id': row['id'],
                    'text': row['reminder_text'],
                    'time': row['reminder_time'],
                    'days': row['days_of_week'],
                    'type': row['reminder_type']
                })
            
            return reminders
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {user_id}: {e}")
        return []

def delete_reminder_from_db(reminder_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''UPDATE user_reminders SET is_active = FALSE WHERE id = %s''', (reminder_id,))
            
            conn.commit()
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

# ========== –°–ò–°–¢–ï–ú–ê –û–¢–ü–†–ê–í–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========

async def send_reminder_job(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        async with get_db_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            now = datetime.now()
            current_time = now.strftime("%H:%M")
            current_day_rus = now.strftime("%A").lower()
            day_translation = {
                'monday': '–ø–Ω', 'tuesday': '–≤—Ç', 'wednesday': '—Å—Ä',
                'thursday': '—á—Ç', 'friday': '–ø—Ç', 'saturday': '—Å–±', 'sunday': '–≤—Å'
            }
            current_day = day_translation.get(current_day_rus, '–ø–Ω')
            
            # –ò—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (PostgreSQL)
            async with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
                await cursor.execute('''
                    SELECT ur.id, ur.user_id, ur.reminder_text, c.first_name, ur.reminder_type
                    FROM user_reminders ur 
                    JOIN clients c ON ur.user_id = c.user_id 
                    WHERE ur.is_active = TRUE AND ur.reminder_time = %s 
                    AND (ur.days_of_week LIKE %s OR ur.days_of_week = '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' OR ur.days_of_week = '')
                ''', (current_time, f'%{current_day}%'))
                
                reminders = await cursor.fetchall()
                
                for reminder in reminders:
                    reminder_id = reminder['id']
                    user_id = reminder['user_id']
                    reminder_text = reminder['reminder_text']
                    first_name = reminder['first_name']
                    reminder_type = reminder['reminder_type']
                    
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
                        )
                        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
                        if reminder_type == 'once':
                            await cursor.execute(
                                'UPDATE user_reminders SET is_active = FALSE WHERE id = %s',
                                (reminder_id,)
                            )
                            await conn.commit()
                            logger.info(f"üìù –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")
                            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_reminder_job: {e}")

def schedule_reminders(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        job_queue = application.job_queue
        if job_queue:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            job_queue.run_repeating(
                callback=send_reminder_job,
                interval=60,  # 60 —Å–µ–∫—É–Ω–¥
                first=10,     # –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                name="reminder_checker"
            )
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# ========== GOOGLE SHEETS –ú–ï–ù–ï–î–ñ–ï–† ==========

class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    def __init__(self):
        self.client = None
        self.sheet = None
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
        try:
            if not GOOGLE_SHEETS_AVAILABLE:
                logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
                
            if not GOOGLE_CREDENTIALS_JSON or not GOOGLE_SHEETS_ID:
                logger.warning("‚ö†Ô∏è GOOGLE_CREDENTIALS_JSON –∏–ª–∏ GOOGLE_SHEETS_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ credentials
            try:
                creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
                required_keys = ['type', 'project_id', 'private_key_id', 'private_key']
                if not all(key in creds_dict for key in required_keys):
                    logger.error("‚ùå Invalid Google credentials structure")
                    return None
            except (json.JSONDecodeError, ValueError) as e:
                logger.error(f"‚ùå Invalid Google credentials JSON: {e}")
                return None
            
            scope = ['https://www.googleapis.com/auth/spreadsheets']
            creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
            self.client = gspread.authorize(creds)
            
            self.sheet = self.client.open_by_key(GOOGLE_SHEETS_ID)
            logger.info("‚úÖ Google Sheets –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            return None
    
    def save_daily_data(self, user_id: int, data_type: str, value: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
        if not self.sheet:
            logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
            
        try:
            worksheet = self.sheet.worksheet("–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã")
            today = datetime.now().strftime("%Y-%m-%d")
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            records = worksheet.get_all_records()
            row_index = None
            
            for i, record in enumerate(records, start=2):
                if (str(record.get('id_–∫–ª–∏–µ–Ω—Ç–∞', '')) == str(user_id) and 
                    record.get('–¥–∞—Ç–∞', '') == today):
                    row_index = i
                    break
            
            if not row_index:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                user_info = self.get_user_info(user_id)
                if not user_info:
                    return False
                
                worksheet.append_row([
                    user_id,
                    user_info['username'],
                    user_info['first_name'],
                    today
                ])
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                records = worksheet.get_all_records()
                for i, record in enumerate(records, start=2):
                    if (str(record.get('id_–∫–ª–∏–µ–Ω—Ç–∞', '')) == str(user_id) and 
                        record.get('–¥–∞—Ç–∞', '') == today):
                        row_index = i
                        break
            
            if not row_index:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
            column_mapping = {
                '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ': 8,
                '—ç–Ω–µ—Ä–≥–∏—è': 9,
                '—É—Ä–æ–≤–µ–Ω—å_—Ñ–æ–∫—É—Å–∞': 10,
                '—É—Ä–æ–≤–µ–Ω—å_–º–æ—Ç–∏–≤–∞—Ü–∏–∏': 11,
                '–≤–æ–¥–Ω—ã–π_–±–∞–ª–∞–Ω—Å': 18
            }
            
            if data_type in column_mapping:
                col_index = column_mapping[data_type]
                worksheet.update_cell(row_index, col_index, value)
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets: {user_id} - {data_type}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")
            return False
    
    def get_user_info(self, user_id: int) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
        conn = get_db_connection()
        if not conn:
            return None
            
        try:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT username, first_name FROM clients WHERE user_id = %s", 
                (user_id,)
            )
            result = cursor.fetchone()
            if result:
                return {
                    'username': result['username'] or '', 
                    'first_name': result['first_name'] or ''
                }
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return None
        finally:
            if conn:
                conn.close()

sheets_manager = GoogleSheetsManager()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE clients SET last_activity = %s WHERE user_id = %s",
            (datetime.now(), user_id)
        )
        conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {user_id}: {e}")
    finally:
        if conn:
            conn.close()

def check_user_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    conn = get_db_connection()
    if not conn:
        return False
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM clients WHERE user_id = %s", 
            (user_id,)
        )
        result = cursor.fetchone()
        return result[0] > 0 if result else False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {user_id}: {e}")
        return False
    finally:
        if conn:
            conn.close()

def save_questionnaire_answer(user_id: int, question_number: int, question: str, answer: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO questionnaire_answers (user_id, question_number, question_text, answer_text, created_at)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (user_id, question_number) 
            DO UPDATE SET 
                answer_text = EXCLUDED.answer_text,
                created_at = EXCLUDED.created_at
        ''', (user_id, question_number, question, answer, datetime.now()))
        conn.commit()
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ {user_id}: {e}")
    finally:
        if conn:
            conn.close()

def save_message(user_id: int, message_text: str, direction: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO messages (user_id, message_text, direction, created_at) VALUES (%s, %s, %s, %s)",
            (user_id, message_text, direction, datetime.now())
        )
        conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")
    finally:
        if conn:
            conn.close()

# ========== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ê–ù–ö–ï–¢–´ ==========

def restore_questionnaire_state(user_id: int) -> Dict[str, Any]:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL"""
    conn = get_db_connection()
    if not conn:
        return {'current_question': 0, 'answers': {}, 'has_previous_answers': False}
        
    try:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT question_number, answer_text 
            FROM questionnaire_answers 
            WHERE user_id = %s 
            ORDER BY question_number
        ''', (user_id,))
        
        answers_data = cursor.fetchall()
        answers = {}
        for row in answers_data:
            answers[row['question_number']] = row['answer_text']
        
        if answers:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            last_question = max(answers.keys())
            current_question = last_question + 1 if last_question < len(QUESTIONS) - 1 else last_question
            
            return {
                'current_question': current_question,
                'answers': answers,
                'has_previous_answers': True
            }
        
        return {'current_question': 0, 'answers': {}, 'has_previous_answers': False}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã {user_id}: {e}")
        return {'current_question': 0, 'answers': {}, 'has_previous_answers': False}
    finally:
        if conn:
            conn.close()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user = update.effective_user
    user_id = user.id
    
    save_user_info(user_id, user.username, user.first_name, user.last_name)
    update_user_activity(user_id)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    questionnaire_state = restore_questionnaire_state(user_id)
    
    has_answers = False
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT COUNT(*) FROM questionnaire_answers WHERE user_id = %s", 
                (user_id,)
            )
            result = cursor.fetchone()
            has_answers = result[0] > 0 if result else False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            has_answers = False
        finally:
            conn.close()
    
    if has_answers and questionnaire_state['current_question'] >= len(QUESTIONS):
        # –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        keyboard = [
            ['üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
            ['üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üéÆ –û—á–∫–∏ –æ–ø—ã—Ç–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
        
    elif has_answers and questionnaire_state['current_question'] < len(QUESTIONS):
        # –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        keyboard = [
            ['‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'],
            ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            f"üìã –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
            f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questionnaire_state['current_question']} –∏–∑ {len(QUESTIONS)}\n"
            f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=reply_markup
        )
        
        context.user_data['questionnaire_state'] = questionnaire_state
        return GENDER
        
    else:
        # –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞
        keyboard = [['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
            reply_markup=reply_markup
        )
        
        return GENDER

async def gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    gender = update.message.text.replace('üë® ', '').replace('üë© ', '')
    context.user_data['assistant_gender'] = gender
    
    if gender == '–ú—É–∂—Å–∫–æ–π':
        assistant_name = '–ê–Ω—Ç–æ–Ω'
    else:
        assistant_name = '–í–∞–ª–µ—Ä–∏—è'
    
    context.user_data['assistant_name'] = assistant_name
    context.user_data['current_question'] = 0
    context.user_data['answers'] = {}
    
    await update.message.reply_text(
        f'üßå –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {assistant_name}. –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n'
        f'–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –ø–æ–º–æ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –¥–µ–Ω—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.\n\n'
        f'–Ø —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –≤–∞—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü, –∞ –∑–∞—Ç–µ–º –º—ã –±—É–¥–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, '
        f'—á—Ç–æ–±—ã –≤—ã –¥–≤–∏–≥–∞–ª–∏—Å—å –∫ —Ü–µ–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π –æ –≥–ª–∞–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö: —Å–Ω–µ, —Å–ø–æ—Ä—Ç–µ –∏ –ø–∏—Ç–∞–Ω–∏–∏.\n\n'
        f'–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à —Ä–∏—Ç–º –∂–∏–∑–Ω–∏ –∏ —Ü–µ–ª–∏. '
        f'–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 25-30 –º–∏–Ω—É—Ç. –ù–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –º–µ—Å—è—Ü, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n\n'
        f'–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?',
        reply_markup=ReplyKeyboardRemove()
    )
    
    return FIRST_QUESTION

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã"""
    user_id = update.effective_user.id
    answer_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    current_question = context.user_data['current_question']
    save_questionnaire_answer(user_id, current_question, QUESTIONS[current_question], answer_text)
    context.user_data['answers'][current_question] = answer_text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['current_question'] += 1
    if context.user_data['current_question'] < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[context.user_data['current_question']])
        return FIRST_QUESTION
    else:
        return await finish_questionnaire(update, context)

async def finish_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    user = update.effective_user
    assistant_name = context.user_data['assistant_name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ Google Sheets
    user_data = {
        'user_id': user.id,
        'telegram_username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'start_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'main_goal': context.user_data['answers'].get(1, ''),
        'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        '—Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å': '–ù–æ–≤–∏—á–æ–∫',
        '–æ—á–∫–∏_–æ–ø—ã—Ç–∞': '0',
        '—Ç–µ–∫—É—â–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '0',
        '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '0',
        '–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª': '',
        '–¥–∞—Ç–∞_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–∞': datetime.now().strftime("%Y-%m-%d"),
        '–±–ª–∏–∂–∞–π—à–∞—è_—Ü–µ–ª—å': '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    }
    
    save_client_to_sheets(user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    questionnaire = f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
    questionnaire += f"üë§ ID: {user.id}\n"
    questionnaire += f"üìõ –ò–º—è: {user.first_name}\n"
    if user.last_name:
        questionnaire += f"üìõ –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
    if user.username:
        questionnaire += f"üîó Username: @{user.username}\n"
    questionnaire += f"üìÖ –î–∞—Ç–∞: {update.message.date.strftime('%Y-%m-%d %H:%M')}\n"
    questionnaire += f"üë®‚Äçüíº –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_name}\n\n"
    
    questionnaire += "üìù –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    
    for i, question in enumerate(QUESTIONS):
        answer = context.user_data['answers'].get(i, '‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
        questionnaire += f"‚ùì {i+1}. {question}:\n"
        questionnaire += f"üí¨ {answer}\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    max_length = 4096
    if len(questionnaire) > max_length:
        parts = [questionnaire[i:i+max_length] for i in range(0, len(questionnaire), max_length)]
        for part in parts:
            try:
                await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=part)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
    else:
        try:
            await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=questionnaire)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—É
    try:
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{user.id}")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"view_questionnaire_{user.id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"stats_{user.id}")],
            [InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data=f"create_plan_{user.id}")]
        ])
        
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID, 
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∫–µ—Ç—É!",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        ['üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üéÆ –û—á–∫–∏ –æ–ø—ã—Ç–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n"
        "‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç –¥–ª—è –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.\n\n"
        "üîî –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É!\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –¥—É—à'\n"
        "'–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

# ========== –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ==========

async def admin_add_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìã –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ì–û –ü–õ–ê–ù–ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )
    return ADD_PLAN_USER

async def add_plan_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        user_id = int(update.message.text)
        context.user_data['plan_user_id'] = user_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = get_db_connection()
        if not conn:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return ADD_PLAN_USER
            
        try:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT first_name FROM clients WHERE user_id = %s", 
                (user_id,)
            )
            user_info = cursor.fetchone()
            if not user_info:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
                return ADD_PLAN_USER
            
            context.user_data['user_name'] = user_info['first_name']
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return ADD_PLAN_USER
        finally:
            conn.close()
        
        await update.message.reply_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} (ID: {user_id})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î):"
        )
        return ADD_PLAN_DATE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
        )
        return ADD_PLAN_USER

async def add_plan_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    date_str = update.message.text
    
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        context.user_data['plan_date'] = date_str
        
        await update.message.reply_text(
            f"üìÖ –î–∞—Ç–∞: {date_str}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–ª–∞–Ω–∞.\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
            "- –ó–∞–¥–∞—á–∞ 1\n"
            "- –ó–∞–¥–∞—á–∞ 2\n"
            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
            "- –°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
            "–°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
            "- –í–∞—à —Å–æ–≤–µ—Ç"
        )
        return ADD_PLAN_CONTENT
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADD_PLAN_DATE

async def add_plan_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
    plan_content = update.message.text
    user_id = context.user_data['plan_user_id']
    date_str = context.user_data['plan_date']
    user_name = context.user_data['user_name']
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    plan_data = parse_structured_plan(plan_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    success = save_daily_plan_to_sheets(user_id, date_str, plan_data)
    
    if success:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
        save_user_plan_to_db(user_id, {
            'plan_date': date_str,
            'task1': plan_data.get('strategic_tasks', [''])[0] if plan_data.get('strategic_tasks') else '',
            'task2': plan_data.get('strategic_tasks', [''])[1] if len(plan_data.get('strategic_tasks', [])) > 1 else '',
            'task3': plan_data.get('strategic_tasks', [''])[2] if len(plan_data.get('strategic_tasks', [])) > 2 else '',
            'task4': plan_data.get('critical_tasks', [''])[0] if plan_data.get('critical_tasks') else '',
            'advice': plan_data.get('advice', [''])[0] if plan_data.get('advice') else ''
        })
        
        await update.message.reply_text(
            f"‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üìã –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ {date_str}!\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ."
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets."
        )
    
    return ConversationHandler.END

def save_user_plan_to_db(user_id: int, plan_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO user_plans (user_id, plan_date, task1, task2, task3, task4, advice, status, created_at)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        ''', (user_id, plan_data['plan_date'], plan_data['task1'], plan_data['task2'],
           plan_data['task3'], plan_data['task4'], plan_data['advice'], 'active', datetime.now()))
        conn.commit()
        logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ {user_id}: {e}")
    finally:
        if conn:
            conn.close()

# ========== –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========

def add_reminder_to_db(user_id: int, reminder_data: Dict[str, Any]) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    if not conn:
        return False
        
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO user_reminders 
            (user_id, reminder_text, reminder_time, days_of_week, reminder_type, is_active, created_at)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        ''', (user_id, reminder_data['text'], reminder_data['time'], 
           ','.join(reminder_data.get('days', [])), reminder_data['type'], True, datetime.now()))
        conn.commit()
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")
        return False
    finally:
        if conn:
            conn.close()

def get_user_reminders(user_id: int) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return []
        
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, reminder_text, reminder_time, days_of_week, reminder_type 
            FROM user_reminders 
            WHERE user_id = %s AND is_active = true 
            ORDER BY created_at DESC
        ''', (user_id,))
        
        reminders_data = cursor.fetchall()
        reminders = []
        for row in reminders_data:
            reminders.append({
                'id': row['id'],
                'text': row['reminder_text'],
                'time': row['reminder_time'],
                'days': row['days_of_week'],
                'type': row['reminder_type']
            })
        
        return reminders
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {user_id}: {e}")
        return []
    finally:
        if conn:
            conn.close()

def delete_reminder_from_db(reminder_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"""
    conn = get_db_connection()
    if not conn:
        return False
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE user_reminders SET is_active = false WHERE id = %s', 
            (reminder_id,)
        )
        conn.commit()
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False
    finally:
        if conn:
            conn.close()

# ========== –ö–û–ú–ê–ù–î–´ –¢–†–ï–ö–ò–ù–ì–ê ==========

async def done_command(update: Update, context: CallbackContext):
    """–û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:\n"
            "/done 1 - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
            "/done 2 - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
        )
        return
    
    try:
        task_number = int(context.args[0])
        if task_number < 1 or task_number > 4:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4")
            return
        
        task_names = {1: "–ø–µ—Ä–≤—É—é", 2: "–≤—Ç–æ—Ä—É—é", 3: "—Ç—Ä–µ—Ç—å—é", 4: "—á–µ—Ç–≤–µ—Ä—Ç—É—é"}
        
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {task_names[task_number]} –∑–∞–¥–∞—á—É!\n"
            f"üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def mood_command(update: Update, context: CallbackContext):
    """–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10:\n"
            "/mood 1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ\n"
            "/mood 5 - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ\n" 
            "/mood 10 - –æ—Ç–ª–∏—á–Ω–æ–µ"
        )
        return
    
    try:
        mood = int(context.args[0])
        if mood < 1 or mood > 10:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return
        
        progress_data = {
            'mood': mood,
            'progress_date': datetime.now().strftime("%Y-%m-%d")
        }
        save_progress_to_db(user_id, progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        report_data = {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'mood': mood
        }
        save_daily_report_to_sheets(user_id, report_data)
        
        mood_responses = {
            1: "üòî –ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —É –≤–∞—Å –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
            2: "üòü –ù–∞–¥–µ—é—Å—å, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!",
            3: "üôÅ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã!",
            4: "üòê –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å!",
            5: "üòä –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ - —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!",
            6: "üòÑ –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!",
            7: "üòÅ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –∑–∞ –≤–∞—Å!",
            8: "ü§© –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
            9: "ü•≥ –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
            10: "üéâ –ò–¥–µ–∞–ª—å–Ω–æ!"
        }
        
        response = mood_responses.get(mood, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        await update.message.reply_text(f"{response}\n\nüìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")

async def energy_command(update: Update, context: CallbackContext):
    """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç 1 –¥–æ 10:\n"
            "/energy 1 - —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Å–∏–ª\n"
            "/energy 5 - —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
            "/energy 10 - –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏!"
        )
        return
    
    try:
        energy = int(context.args[0])
        if energy < 1 or energy > 10:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return
        
        progress_data = {
            'energy': energy,
            'progress_date': datetime.now().strftime("%Y-%m-%d")
        }
        save_progress_to_db(user_id, progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        report_data = {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'energy': energy
        }
        save_daily_report_to_sheets(user_id, report_data)
        
        energy_responses = {
            1: "üí§ –í–∞–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?",
            2: "üò¥ –ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è —Ç—è–∂–µ–ª—ã–π –¥–µ–Ω—å. –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è!",
            3: "üõå –û—Ç–¥—ã—Ö - —ç—Ç–æ —Ç–æ–∂–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ!",
            4: "üßò –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—Ä—è–¥–∫–∞ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å!",
            5: "‚ö° –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!",
            6: "üí™ –•–æ—Ä–æ—à–∞—è —ç–Ω–µ—Ä–≥–∏—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            7: "üöÄ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏!",
            8: "üî• –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —ç–Ω–µ—Ä–≥–∏—é!",
            9: "üåü –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è!",
            10: "üéØ –ò–¥–µ–∞–ª—å–Ω–æ! –í—ã –ø–æ–ª–Ω—ã —Å–∏–ª!"
        }
        
        response = energy_responses.get(energy, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        await update.message.reply_text(f"{response}\n\nüìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")

async def water_command(update: Update, context: CallbackContext):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–∞–Ω–æ–≤: /water 6\n\n"
            "–ü—Ä–∏–º–µ—Ä: /water 8 - –≤—ã–ø–∏—Ç–æ 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã"
        )
        return
    
    try:
        water = int(context.args[0])
        if water < 0 or water > 20:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–∞–Ω–æ–≤ (0-20)")
            return
        
        progress_data = {
            'water_intake': water,
            'progress_date': datetime.now().strftime("%Y-%m-%d")
        }
        save_progress_to_db(user_id, progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        report_data = {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'water_intake': water
        }
        save_daily_report_to_sheets(user_id, report_data)
        
        responses = {
            0: "üíß –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã?",
            1: "üíß –ú–∞–ª–æ –≤–æ–¥—ã, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ!",
            2: "üíß –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            3: "üíß –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!",
            4: "üíß –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!",
            5: "üíß –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!",
            6: "üíß –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            7: "üíß –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!",
            8: "üíß –ò–¥–µ–∞–ª—å–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü!"
        }
        response = responses.get(water, f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {water} —Å—Ç–∞–∫–∞–Ω–æ–≤")
        await update.message.reply_text(f"{response}\n\nüìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# ========== –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–†–ï–°–°–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

def save_progress_to_db(user_id: int, progress_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        progress_date = datetime.now().strftime("%Y-%m-%d")
        
        cursor.execute('''
            INSERT INTO user_progress 
            (user_id, progress_date, tasks_completed, mood, energy, sleep_quality, 
             water_intake, activity_done, user_comment, day_rating, challenges) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ''', (user_id, progress_date, progress_data.get('tasks_completed'), 
           progress_data.get('mood'), progress_data.get('energy'), 
           progress_data.get('sleep_quality'), progress_data.get('water_intake'),
           progress_data.get('activity_done'), progress_data.get('user_comment'),
           progress_data.get('day_rating'), progress_data.get('challenges')))
        conn.commit()
        logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {user_id}: {e}")
    finally:
        if conn:
            conn.close()

def has_sufficient_data(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–∏–Ω–∏–º—É–º 3 –¥–Ω—è)"""
    conn = get_db_connection()
    if not conn:
        return False
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(DISTINCT progress_date) FROM user_progress WHERE user_id = %s", 
            (user_id,)
        )
        result = cursor.fetchone()
        count = result[0] if result else 0
        return count >= 3
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}: {e}")
        return False
    finally:
        if conn:
            conn.close()

def get_user_activity_streak(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"""
    conn = get_db_connection()
    if not conn:
        return 0
        
    try:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT DISTINCT progress_date FROM user_progress WHERE user_id = %s ORDER BY progress_date DESC", 
            (user_id,)
        )
        dates_data = cursor.fetchall()
        dates = [row[0] for row in dates_data]
        
        if not dates:
            return 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        dates.sort(reverse=True)
        streak = 0
        today = datetime.now().date()
        
        for i, date in enumerate(dates):
            expected_date = today - timedelta(days=i)
            if date == expected_date:
                streak += 1
            else:
                break
        
        return streak
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–∏ –¥–ª—è {user_id}: {e}")
        return 0
    finally:
        if conn:
            conn.close()

def get_user_main_goal(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–Ω–∫–µ—Ç—ã"""
    conn = get_db_connection()
    if not conn:
        return "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT answer_text FROM questionnaire_answers WHERE user_id = %s AND question_number = 1", 
            (user_id,)
        )
        result = cursor.fetchone()
        return result['answer_text'] if result else "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–ª—è {user_id}: {e}")
        return "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    finally:
        if conn:
            conn.close()

def get_favorite_ritual(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—é–±–∏–º—ã–π —Ä–∏—Ç—É–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return "–ª–∏—á–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã"
        
    try:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ —Ä–∏—Ç—É–∞–ª–∞—Ö –∏–∑ –∞–Ω–∫–µ—Ç—ã
        cursor.execute(
            "SELECT answer_text FROM questionnaire_answers WHERE user_id = %s AND question_number = 22", 
            (user_id,)
        )
        result = cursor.fetchone()
        
        if result:
            rituals_text = result['answer_text']
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            if "–º–µ–¥–∏—Ç–∞—Ü–∏—è" in rituals_text.lower():
                return "–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è"
            elif "–∑–∞—Ä—è–¥–∫–∞" in rituals_text.lower() or "—Ä–∞—Å—Ç—è–∂–∫–∞" in rituals_text.lower():
                return "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
            elif "—á—Ç–µ–Ω–∏–µ" in rituals_text.lower():
                return "–í–µ—á–µ—Ä–Ω–µ–µ —á—Ç–µ–Ω–∏–µ"
            elif "–¥–Ω–µ–≤–Ω–∏–∫" in rituals_text.lower():
                return "–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞"
            elif "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in rituals_text.lower():
                return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"
        
        return "–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞ –¥–ª—è {user_id}: {e}")
        return "–ª–∏—á–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã"
    finally:
        if conn:
            conn.close()

def get_user_level_info(user_id: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return {'level': '–ù–æ–≤–∏—á–æ–∫', 'points': 0, 'points_to_next': 50, 'next_level_points': 50}
        
    try:
        cursor = conn.cursor()
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        cursor.execute(
            "SELECT COUNT(DISTINCT progress_date) FROM user_progress WHERE user_id = %s", 
            (user_id,)
        )
        active_days_result = cursor.fetchone()
        active_days = active_days_result[0] if active_days_result else 0
        
        # –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute(
            "SELECT SUM(tasks_completed) FROM user_progress WHERE user_id = %s", 
            (user_id,)
        )
        total_tasks_result = cursor.fetchone()
        total_tasks = total_tasks_result[0] if total_tasks_result else 0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
        level_points = active_days * 10 + total_tasks * 2
        level_names = {
            0: "–ù–æ–≤–∏—á–æ–∫",
            50: "–£—á–µ–Ω–∏–∫", 
            100: "–û–ø—ã—Ç–Ω—ã–π",
            200: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
            500: "–ú–∞—Å—Ç–µ—Ä"
        }
        
        current_level = "–ù–æ–≤–∏—á–æ–∫"
        next_level_points = 50
        points_to_next = 50
        
        for points, level in sorted(level_names.items()):
            if level_points >= points:
                current_level = level
            else:
                next_level_points = points
                points_to_next = points - level_points
                break
        
        return {
            'level': current_level,
            'points': level_points,
            'points_to_next': points_to_next,
            'next_level_points': next_level_points
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è {user_id}: {e}")
        return {'level': '–ù–æ–≤–∏—á–æ–∫', 'points': 0, 'points_to_next': 50, 'next_level_points': 50}
    finally:
        if conn:
            conn.close()

def get_user_usage_days(user_id: int) -> Dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    conn = get_db_connection()
    if not conn:
        return {'days_since_registration': 0, 'active_days': 0, 'current_day': 0, 'current_streak': 0}
        
    try:
        cursor = conn.cursor()
        # –î–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        cursor.execute(
            "SELECT registration_date FROM clients WHERE user_id = %s", 
            (user_id,)
        )
        reg_result = cursor.fetchone()
        if not reg_result:
            return {'days_since_registration': 0, 'active_days': 0, 'current_day': 0, 'current_streak': 0}
        
        reg_date = reg_result['registration_date']
        days_since_registration = (datetime.now().date() - reg_date.date()).days + 1
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ (–∫–æ–≥–¥–∞ –±—ã–ª –ø—Ä–æ–≥—Ä–µ—Å—Å)
        cursor.execute(
            "SELECT COUNT(DISTINCT progress_date) FROM user_progress WHERE user_id = %s", 
            (user_id,)
        )
        active_days_result = cursor.fetchone()
        active_days = active_days_result[0] if active_days_result else 0
        
        # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
        current_streak = get_user_activity_streak(user_id)
        
        return {
            'days_since_registration': days_since_registration,
            'active_days': active_days,
            'current_day': active_days if active_days > 0 else 1,
            'current_streak': current_streak
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω–µ–π –¥–ª—è {user_id}: {e}")
        return {'days_since_registration': 0, 'active_days': 0, 'current_day': 0, 'current_streak': 0}
    finally:
        if conn:
            conn.close()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========

async def plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not check_user_registered(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ Google Sheets
    today = datetime.now().strftime("%Y-%m-%d")
    plan_data = get_daily_plan_from_sheets(user_id, today)
    
    if not plan_data:
        await update.message.reply_text(
            "üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤.\n\n"
            "–ù–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –∏ —Å–∫–æ—Ä–æ —Å–æ—Å—Ç–∞–≤–∏—Ç –¥–ª—è –≤–∞—Å "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n"
            "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
    plan_text = f"üìã –í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ {today}:\n\n"
    
    if plan_data.get('strategic_tasks'):
        plan_text += "üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
        for task in plan_data['strategic_tasks']:
            plan_text += f"‚Ä¢ {task}\n"
        plan_text += "\n"
    
    if plan_data.get('critical_tasks'):
        plan_text += "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
        for task in plan_data['critical_tasks']:
            plan_text += f"‚Ä¢ {task}\n"
        plan_text += "\n"
    
    if plan_data.get('priorities'):
        plan_text += "üéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –î–ù–Ø:\n"
        for priority in plan_data['priorities']:
            plan_text += f"‚Ä¢ {priority}\n"
        plan_text += "\n"
    
    if plan_data.get('advice'):
        plan_text += "üí° –°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
        for advice in plan_data['advice']:
            plan_text += f"‚Ä¢ {advice}\n"
        plan_text += "\n"
    
    if plan_data.get('motivation_quote'):
        plan_text += f"üí´ –ú–û–¢–ò–í–ê–¶–ò–Ø: {plan_data['motivation_quote']}\n"
    
    await update.message.reply_text(plan_text)

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    if not check_user_registered(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    if not has_sufficient_data(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
        usage_days = get_user_usage_days(user_id)
        
        await update.message.reply_text(
            f"üìä –í–ê–® –ü–†–û–ì–†–ï–°–° –§–û–†–ú–ò–†–£–ï–¢–°–Ø!\n\n"
            f"üìÖ –î–µ–Ω—å {usage_days['current_day']} ‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {usage_days['days_since_registration']} ‚Ä¢ –°–µ—Ä–∏—è: {usage_days['current_streak']}\n\n"
            f"–ü–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\n"
            f"‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: 0/‚àû\n"
            f"‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
            f"‚úì –≠–Ω–µ—Ä–≥–∏—è: —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ\n"
            f"‚úì –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n"
            f"‚úì –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –º–æ–Ω–∏—Ç–æ—Ä–∏–º —Å {usage_days['days_since_registration']} –¥–Ω–µ–π\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!\n"
            f"–£–∂–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        conn = get_db_connection()
        if not conn:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_days,
                    AVG(tasks_completed) as avg_tasks,
                    AVG(mood) as avg_mood,
                    AVG(energy) as avg_energy,
                    AVG(water_intake) as avg_water,
                    COUNT(DISTINCT progress_date) as active_days
                FROM user_progress 
                WHERE user_id = %s AND progress_date >= CURRENT_DATE - INTERVAL '7 days'
            """, (user_id,))
            
            result = cursor.fetchone()
            
            total_days = result['total_days'] or 0
            avg_tasks = result['avg_tasks'] or 0
            avg_mood = result['avg_mood'] or 0
            avg_energy = result['avg_energy'] or 0
            avg_water = result['avg_water'] or 0
            active_days = result['active_days'] or 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥–∏–Ω–∞–º–∏–∫—É
            tasks_completed = f"{int(avg_tasks * 10)}/10" if avg_tasks else "0/10"
            mood_str = f"{avg_mood:.1f}/10" if avg_mood else "0/10"
            energy_str = f"{avg_energy:.1f}/10" if avg_energy else "0/10"
            water_str = f"{avg_water:.1f} —Å—Ç–∞–∫–∞–Ω–æ–≤/–¥–µ–Ω—å" if avg_water else "0 —Å—Ç–∞–∫–∞–Ω–æ–≤/–¥–µ–Ω—å"
            activity_str = f"{active_days}/7 –¥–Ω–µ–π"

            # –î–∏–Ω–∞–º–∏–∫–∞
            mood_dynamics = "‚Üó —É–ª—É—á—à–∞–µ—Ç—Å—è" if avg_mood and avg_mood > 6 else "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ"
            energy_dynamics = "‚Üó —Ä–∞—Å—Ç–µ—Ç" if avg_energy and avg_energy > 6 else "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ"
            productivity_dynamics = "‚Üó —Ä–∞—Å—Ç–µ—Ç" if avg_tasks and avg_tasks > 5 else "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ"

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            usage_days = get_user_usage_days(user_id)
            level_info = get_user_level_info(user_id)

            # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
            advice = "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏."
            if avg_water and avg_water < 6:
                advice = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –¥–æ 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ - —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é!"
            elif avg_mood and avg_mood < 6:
                advice = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞ - —ç—Ç–æ —É–ª—É—á—à–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"

            await update.message.reply_text(
                f"üìä –í–ê–® –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–°\n\n"
                f"üìÖ –î–µ–Ω—å {usage_days['current_day']} ‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {usage_days['days_since_registration']} ‚Ä¢ –°–µ—Ä–∏—è: {usage_days['current_streak']}\n\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {tasks_completed}\n"
                f"üòä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_str}\n"
                f"‚ö° –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {energy_str}\n"
                f"üíß –í–æ–¥–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º: {water_str}\n"
                f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_str}\n\n"
                f"üìà –î–ò–ù–ê–ú–ò–ö–ê:\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_dynamics}\n"
                f"‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: {energy_dynamics}\n"
                f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity_dynamics}\n\n"
                f"üéØ –°–û–í–ï–¢: {advice}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            conn.close()

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = user.id
    update_user_activity(user_id)
    
    if not check_user_registered(user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    main_goal = get_user_main_goal(user_id)
    usage_days = get_user_usage_days(user_id)
    level_info = get_user_level_info(user_id)
    favorite_ritual = get_favorite_ritual(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞–Ω–∞–º
    conn = get_db_connection()
    if not conn:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM user_plans WHERE user_id = %s", 
            (user_id,)
        )
        total_plans_result = cursor.fetchone()
        total_plans = total_plans_result[0] if total_plans_result else 0

        cursor.execute(
            "SELECT COUNT(*) FROM user_plans WHERE user_id = %s AND status = 'completed'", 
            (user_id,)
        )
        completed_plans_result = cursor.fetchone()
        completed_plans = completed_plans_result[0] if completed_plans_result else 0

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
        plans_percentage = (completed_plans / total_plans * 100) if total_plans > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_text = (
            f"üë§ –í–ê–® –ü–†–û–§–ò–õ–¨\n\n"
            f"üìÖ –î–µ–Ω—å {usage_days['current_day']} ‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {usage_days['days_since_registration']} ‚Ä¢ –°–µ—Ä–∏—è: {usage_days['current_streak']}\n\n"
            f"üéØ –¢–ï–ö–£–©–ê–Ø –¶–ï–õ–¨: {main_goal}\n"
            f"üìä –í–´–ü–û–õ–ù–ï–ù–û: {plans_percentage:.1f}% –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏\n\n"
            f"üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {completed_plans} –∏–∑ {total_plans} ({plans_percentage:.1f}%)\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {usage_days['current_streak']} –¥–Ω–µ–π\n"
            f"‚Ä¢ –õ—é–±–∏–º—ã–π —Ä–∏—Ç—É–∞–ª: {favorite_ritual}\n\n"
            f"üéÆ –£–†–û–í–ï–ù–¨: {level_info['level']}\n"
            f"‚≠ê –û–ß–ö–û–í: {level_info['points']} –∏–∑ {level_info['next_level_points']} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n"
            f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
        )
        
        await update.message.reply_text(profile_text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()

async def points_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤"""
    help_text = (
        "üéÆ –°–ò–°–¢–ï–ú–ê –û–ß–ö–û–í –ò –£–†–û–í–ù–ï–ô:\n\n"
        "üìä –ö–∞–∫ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏:\n"
        "‚Ä¢ +10 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ +2 –æ—á–∫–∞ –∑–∞ –∫–∞–∂–¥—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É\n"
        "‚Ä¢ +5 –æ—á–∫–æ–≤ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ +15 –æ—á–∫–æ–≤ –∑–∞ —Å–µ—Ä–∏—é –∏–∑ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n\n"
        "üèÜ –£—Ä–æ–≤–Ω–∏:\n"
        "‚Ä¢ –ù–æ–≤–∏—á–æ–∫ (0 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –£—á–µ–Ω–∏–∫ (50 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –û–ø—ã—Ç–Ω—ã–π (100 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (200 –æ—á–∫–æ–≤)\n"
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä (500 –æ—á–∫–æ–≤)\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!\n"
        "‚Ä¢ –î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –æ—á–∫–∏\n"
        "‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–∏"
    )
    await update.message.reply_text(help_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id
    update_user_activity(user_id)
    
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        
        "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/plan - –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/progress - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/points_info - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–∫–æ–≤\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        
        "üîπ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
        "/done <1-4> - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/mood <1-10> - –û—Ü–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "/energy <1-10> - –û—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏\n"
        "/water <—Å—Ç–∞–∫–∞–Ω—ã> - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã\n\n"
        
        "üîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "/remind_me <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> - –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/regular_remind <–≤—Ä–µ–º—è> <–¥–Ω–∏> <—Ç–µ–∫—Å—Ç> - –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/my_reminders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/delete_remind <id> - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
        
        "üí° –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫'\n"
        "'–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –≤ 11 –≤–µ—á–µ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'\n\n"
        
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!"
    )
    
    await update.message.reply_text(help_text)

# ========== –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô - –ö–û–ú–ê–ù–î–´ ==========

async def remind_me_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "/remind_me <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/remind_me 20:30 –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\n"
            "/remind_me 9 —É—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É\n"
            "/remind_me 11 –≤–µ—á–µ—Ä–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫\n"
            "/remind_me –≤–µ—á–µ—Ä–æ–º –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä\n\n"
            "‚è±Ô∏è –í—Ä–µ–º—è –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n"
            "‚Ä¢ 20:30, 09:00\n"
            "‚Ä¢ 9 —É—Ç—Ä–∞, 7 –≤–µ—á–µ—Ä–∞, 11 –Ω–æ—á–∏\n"
            "‚Ä¢ 11 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞, 3 —á–∞—Å–∞ –¥–Ω—è\n"
            "‚Ä¢ —É—Ç—Ä–æ–º, –¥–Ω–µ–º, –≤–µ—á–µ—Ä–æ–º, –Ω–æ—á—å—é"
        )
        return
    
    time_str = context.args[0]
    reminder_text = " ".join(context.args[1:])
    
    logger.info(f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {time_str} - {reminder_text}")
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    time_data = parse_time_input(time_str)
    
    if not time_data:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 20:30 –∏–ª–∏ 09:00\n"
            "‚Ä¢ 9 —É—Ç—Ä–∞ –∏–ª–∏ 7 –≤–µ—á–µ—Ä–∞\n"
            "‚Ä¢ 11 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞\n"
            "‚Ä¢ —É—Ç—Ä–æ–º, –¥–Ω–µ–º, –≤–µ—á–µ—Ä–æ–º"
        )
        return
    
    reminder_data = {
        'type': 'once',
        'time': time_data['time'],
        'text': reminder_text,
        'days': []
    }
    
    success = add_reminder_to_db(user_id, reminder_data)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_data['time']}:\n"
            f"üìù {reminder_text}\n\n"
            f"–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

async def regular_remind_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not context.args or len(context.args) < 3:
        await update.message.reply_text(
            "üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "/regular_remind <–≤—Ä–µ–º—è> <–¥–Ω–∏> <—Ç–µ–∫—Å—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/regular_remind 08:00 –ø–Ω,—Å—Ä,–ø—Ç —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞\n"
            "/regular_remind 09:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã\n"
            "/regular_remind 20:00 –≤—Ç,—á—Ç –π–æ–≥–∞\n\n"
            "üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏:\n"
            "–ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å\n"
            "–∏–ª–∏ '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π"
        )
        return
    
    time_str = context.args[0]
    days_str = context.args[1]
    reminder_text = " ".join(context.args[2:])
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    time_data = parse_time_input(time_str)
    
    if not time_data:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_map = {
        '–ø–Ω': '–ø–Ω', '–≤—Ç': '–≤—Ç', '—Å—Ä': '—Å—Ä', '—á—Ç': '—á—Ç',
        '–ø—Ç': '–ø—Ç', '—Å–±': '—Å–±', '–≤—Å': '–≤—Å',
        '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ': ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'],
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–Ω', '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç', '—Å—Ä–µ–¥–∞': '—Å—Ä', '—á–µ—Ç–≤–µ—Ä–≥': '—á—Ç',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—Ç', '—Å—É–±–±–æ—Ç–∞': '—Å–±', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–≤—Å'
    }
    
    if days_str.lower() == '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ':
        days = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
    else:
        days = []
        for day_part in days_str.split(','):
            day_clean = day_part.strip().lower()
            if day_clean in days_map:
                if isinstance(days_map[day_clean], list):
                    days.extend(days_map[day_clean])
                else:
                    days.append(days_map[day_clean])
    
    if not days:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–Ω,—Å—Ä,–ø—Ç –∏–ª–∏ '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'"
        )
        return
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    days = list(set(days))
    
    reminder_data = {
        'type': 'regular',
        'time': time_data['time'],
        'text': reminder_text,
        'days': days
    }
    
    success = add_reminder_to_db(user_id, reminder_data)
    
    if success:
        days_display = ', '.join(days) if days != ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'] else '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n"
            f"‚è∞ {time_data['time']} {days_display}\n"
            f"üìù {reminder_text}\n\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

async def my_reminders_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    reminders = get_user_reminders(user_id)
    
    if not reminders:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            "üí° –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /remind_me –∏–ª–∏ /regular_remind\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
            "  '–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫'\n"
            "  '–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
        )
        return
    
    reminders_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    
    for i, reminder in enumerate(reminders, 1):
        type_icon = "üîÑ" if reminder['type'] == 'regular' else "‚è∞"
        days_info = f" ({reminder['days']})" if reminder['type'] == 'regular' else ""
        
        reminders_text += f"{i}. {type_icon} {reminder['time']}{days_info}\n"
        reminders_text += f"   üìù {reminder['text']}\n"
        reminders_text += f"   üÜî ID: {reminder['id']}\n\n"
    
    reminders_text += "‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n/delete_remind <ID>"
    
    await update.message.reply_text(reminders_text)

async def delete_remind_command(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "/delete_remind <ID>\n\n"
            "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
            "/my_reminders"
        )
        return
    
    try:
        reminder_id = int(context.args[0])
        success = delete_reminder_from_db(reminder_id)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ!\n\n"
                f"üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
                f"/my_reminders"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID."
            )
        
    except ValueError:
        await update.message.reply_text("‚ùå ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# ========== –ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    conn = get_db_connection()
    if not conn:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM clients")
        total_users_result = cursor.fetchone()
        total_users = total_users_result[0] if total_users_result else 0
        
        cursor.execute(
            "SELECT COUNT(*) FROM clients WHERE DATE(last_activity) = CURRENT_DATE"
        )
        active_today_result = cursor.fetchone()
        active_today = active_today_result[0] if active_today_result else 0
        
        cursor.execute(
            "SELECT COUNT(*) FROM messages WHERE direction = 'incoming'"
        )
        total_messages_result = cursor.fetchone()
        total_messages = total_messages_result[0] if total_messages_result else 0
        
        cursor.execute("SELECT COUNT(*) FROM questionnaire_answers")
        total_answers_result = cursor.fetchone()
        total_answers = total_answers_result[0] if total_answers_result else 0
        
        cursor.execute("SELECT COUNT(*) FROM user_plans")
        total_plans_result = cursor.fetchone()
        total_plans = total_plans_result[0] if total_plans_result else 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        total_users = active_today = total_messages = total_answers = total_plans = 0
    finally:
        conn.close()
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
    stats_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
    stats_text += f"üìù –û—Ç–≤–µ—Ç–æ–≤ –≤ –∞–Ω–∫–µ—Ç–∞—Ö: {total_answers}\n"
    stats_text += f"üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {total_plans}\n\n"
    
    if sheets_manager.sheet:
        stats_text += f"üìä Google Sheets: ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
    else:
        stats_text += f"üìä Google Sheets: ‚ùå –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    await update.message.reply_text(stats_text)

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    conn = get_db_connection()
    if not conn:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT user_id, username, first_name, last_activity FROM clients ORDER BY last_activity DESC LIMIT 20"
        )
        users = cursor.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users = []
    finally:
        conn.close()
    
    if not users:
        await update.message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    users_text = "üë• –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
    
    for user in users:
        user_id = user['user_id']
        username = user['username']
        first_name = user['first_name']
        last_activity = user['last_activity']
        
        username_display = f"@{username}" if username else "–±–µ–∑ username"
        users_text += f"üÜî {user_id} - {first_name} ({username_display})\n"
        users_text += f"   üìÖ –ê–∫—Ç–∏–≤–µ–Ω: {last_activity}\n\n"
    
    users_text += "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_plan"
    
    await update.message.reply_text(users_text)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ==========

async def handle_all_messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    save_message(user_id, message_text, 'incoming')
    update_user_activity(user_id)
    
    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    if any(word in message_text.lower() for word in ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π']):
        await handle_reminder_nlp(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    button_handlers = {
        'üìä –ø—Ä–æ–≥—Ä–µ—Å—Å': progress_command,
        'üë§ –ø—Ä–æ—Ñ–∏–ª—å': profile_command,
        'üìã –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': plan_command,
        'üîî –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': my_reminders_command,
        '‚ÑπÔ∏è –ø–æ–º–æ—â—å': help_command,
        'üéÆ –æ—á–∫–∏ –æ–ø—ã—Ç–∞': points_info_command,
        'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å': progress_command,
        'üë§ –ü—Ä–æ—Ñ–∏–ª—å': profile_command, 
        'üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': plan_command,
        'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': my_reminders_command,
        '‚ÑπÔ∏è –ü–æ–º–æ—â—å': help_command,
        'üéÆ –û—á–∫–∏ –æ–ø—ã—Ç–∞': points_info_command
    }
    
    if message_text.lower() in [key.lower() for key in button_handlers.keys()]:
        # –ù–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        for key, handler in button_handlers.items():
            if key.lower() == message_text.lower():
                await handler(update, context)
                return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await update.message.reply_text(
        "ü§ñ –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"  
        "‚Ä¢ /plan - –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ /progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ /help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
    )

# ========== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –ê–ù–ö–ï–¢–´ ==========

async def handle_continue_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    choice = update.message.text
    questionnaire_state = context.user_data.get('questionnaire_state', {})
    
    if choice == '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        context.user_data['current_question'] = questionnaire_state['current_question']
        context.user_data['answers'] = questionnaire_state['answers']
        
        await update.message.reply_text(
            f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç—É —Å –≤–æ–ø—Ä–æ—Å–∞ {questionnaire_state['current_question'] + 1}...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        await update.message.reply_text(QUESTIONS[questionnaire_state['current_question']])
        return FIRST_QUESTION
        
    elif choice == 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        conn = get_db_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute(
                    "DELETE FROM questionnaire_answers WHERE user_id = %s", 
                    (update.effective_user.id,)
                )
                conn.commit()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {e}")
            finally:
                conn.close()
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        context.user_data['current_question'] = 0
        context.user_data['answers'] = {}
        
        await update.message.reply_text(
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await update.message.reply_text(QUESTIONS[0])
        return FIRST_QUESTION
        
    else:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

# ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ==========

async def send_morning_plan(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT user_id, first_name, username FROM clients WHERE status = 'active'"
        )
        users = cursor.fetchall()
        
        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            today = datetime.now().strftime("%Y-%m-%d")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ Google Sheets
            plan_data = get_daily_plan_from_sheets(user_id, today)
            
            if plan_data:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name}!\n\n"
                message += "üìã –í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                
                if plan_data.get('strategic_tasks'):
                    message += "üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
                    for task in plan_data['strategic_tasks']:
                        message += f"‚Ä¢ {task}\n"
                    message += "\n"
                
                if plan_data.get('critical_tasks'):
                    message += "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
                    for task in plan_data['critical_tasks']:
                        message += f"‚Ä¢ {task}\n"
                    message += "\n"
                
                if plan_data.get('priorities'):
                    message += "üéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –î–ù–Ø:\n"
                    for priority in plan_data['priorities']:
                        message += f"‚Ä¢ {priority}\n"
                    message += "\n"
                
                if plan_data.get('advice'):
                    message += "üí° –°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
                    for advice in plan_data['advice']:
                        message += f"‚Ä¢ {advice}\n"
                    message += "\n"
                
                if plan_data.get('motivation_quote'):
                    message += f"üí´ –ú–û–¢–ò–í–ê–¶–ò–Ø: {plan_data['motivation_quote']}\n\n"
                
                message += "üí™ –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!"
                
                try:
                    await context.bot.send_message(chat_id=user_id, text=message)
                    logger.info(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_morning_plan: {e}")
    finally:
        conn.close()

async def send_evening_survey(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    conn = get_db_connection()
    if not conn:
        return
        
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT user_id, first_name FROM clients WHERE status = 'active'"
        )
        users = cursor.fetchall()
        
        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            
            message = (
                f"üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {first_name}!\n\n"
                "üìä –ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?\n\n"
                "1. üéØ –í—ã–ø–æ–ª–Ω–∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏? (–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                "2. üåÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã? (–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                "3. üåô –í—ã–ø–æ–ª–Ω–∏–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã? (–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                "4. üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10?\n"
                "5. ‚ö° –≠–Ω–µ—Ä–≥–∏—è –æ—Ç 1 –¥–æ 10?\n"
                "6. üéØ –£—Ä–æ–≤–µ–Ω—å —Ñ–æ–∫—É—Å–∞ –æ—Ç 1 –¥–æ 10?\n"
                "7. üî• –£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç 1 –¥–æ 10?\n"
                "8. üèÜ –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è?\n"
                "9. üöß –ë—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è?\n"
                "10. üåü –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ?\n"
                "11. üìà –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
                "12. üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?\n"
                "13. üíß –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª–∏? (—Å—Ç–∞–∫–∞–Ω–æ–≤)\n\n"
            )
            
            try:
                await context.bot.send_message(chat_id=user_id, text=message)
                logger.info(f"‚úÖ –í–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_evening_survey: {e}")
    finally:
        conn.close()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========

async def handle_reminder_nlp(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {message_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 20 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    reminders = get_user_reminders(user_id)
    if len(reminders) >= 20:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (20).\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: /my_reminders"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_data = parse_reminder_text(message_text)
    
    if not reminder_data:
        await update.message.reply_text(
            "‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫:\n"
            "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫'\n"
            "'–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'\n"
            "'–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É'\n"
            "'–Ω–∞–ø–æ–º–Ω–∏ –≤ 11 –≤–µ—á–µ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É
    success = add_reminder_to_db(user_id, reminder_data)
    
    if success:
        if reminder_data['type'] == 'regular':
            days_display = ', '.join(reminder_data['days']) if reminder_data['days'] != ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'] else '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
            response = (
                f"‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"‚è∞ {reminder_data['time']} {days_display}\n"
                f"üìù {reminder_data['text']}\n\n"
                f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
            )
        else:
            response = (
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"‚è∞ {reminder_data['time']}\n"
                f"üìù {reminder_data['text']}\n\n"
                f"–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            )
        
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    error = context.error
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∏ –Ω–µ–≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    ignore_errors = [
        "terminated by other getUpdates request",
        "Conflict", 
        "ConnectionError",
        "Timed out",
        "RetryAfter",
        "Restarting",
        "Connection lost",
        "Connection aborted",
        "Read timed out",
        "Bad Request",
        "Forbidden",
        "Not Found",
        "Unauthorized",
        "Chat not found"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É
    for ignore in ignore_errors:
        if ignore in str(error):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: {error}")
            return
    
    # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error}")

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    await update.message.reply_text(
        '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# ========== INLINE –ö–ù–û–ü–ö–ò ==========

async def button_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data.startswith('reply_'):
        user_id = callback_data.replace('reply_', '')
        await query.edit_message_text(f"‚úçÔ∏è –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send {user_id} <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
    
    elif callback_data.startswith('view_questionnaire_'):
        user_id = callback_data.replace('view_questionnaire_', '')
        await query.edit_message_text(f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    
    elif callback_data.startswith('stats_'):
        user_id = callback_data.replace('stats_', '')
        await query.edit_message_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    
    elif callback_data.startswith('create_plan_'):
        user_id = callback_data.replace('create_plan_', '')
        await query.edit_message_text(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_plan")

# ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ==========

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è Render"""
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_error_handler(error_handler)

        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                GENDER: [
                    MessageHandler(filters.Regex('^(üë® –ú—É–∂—Å–∫–æ–π|üë© –ñ–µ–Ω—Å–∫–∏–π|–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), gender_choice),
                    MessageHandler(filters.Regex('^(‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∫–µ—Ç—É|üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), handle_continue_choice)
                ],
                FIRST_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
                ADD_PLAN_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plan_user)],
                ADD_PLAN_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plan_date)],
                ADD_PLAN_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plan_content)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        application.add_handler(conv_handler)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        application.add_handler(CommandHandler("plan", plan_command))
        application.add_handler(CommandHandler("progress", progress_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("points_info", points_info_command))
        application.add_handler(CommandHandler("help", help_command))
        
        application.add_handler(CommandHandler("done", done_command))
        application.add_handler(CommandHandler("mood", mood_command))
        application.add_handler(CommandHandler("energy", energy_command))
        application.add_handler(CommandHandler("water", water_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        application.add_handler(CommandHandler("remind_me", remind_me_command))
        application.add_handler(CommandHandler("regular_remind", regular_remind_command))
        application.add_handler(CommandHandler("my_reminders", my_reminders_command))
        application.add_handler(CommandHandler("delete_remind", delete_remind_command))

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        application.add_handler(CommandHandler("add_plan", admin_add_plan))
        application.add_handler(CommandHandler("admin_stats", admin_stats))
        application.add_handler(CommandHandler("admin_users", admin_users))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
        
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –°–ò–°–¢–ï–ú–£ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
        schedule_reminders(application)
        
        # –£–ü–†–û–©–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ JobQueue –¥–ª—è Render Starter
        try:
            job_queue = application.job_queue
            if job_queue:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
                current_jobs = job_queue.jobs()
                for job in current_jobs:
                    job.schedule_removal()
                
                # –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 6:00 (3:00 UTC –¥–ª—è UTC+3)
                job_queue.run_daily(
                    callback=send_morning_plan,
                    time=dt_time(hour=3, minute=0, second=0),
                    days=tuple(range(7)),
                    name="morning_plan"
                )
                
                # –í–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å –≤ 21:00 (18:00 UTC –¥–ª—è UTC+3)
                job_queue.run_daily(
                    callback=send_evening_survey,
                    time=dt_time(hour=18, minute=0, second=0),
                    days=tuple(range(7)),
                    name="evening_survey"
                )
                
                logger.info("‚úÖ JobQueue –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JobQueue: {e}")

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Render —Å PostgreSQL...")
        application.run_polling(
            poll_interval=1.0,
            timeout=20,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()