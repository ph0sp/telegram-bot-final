import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext, ConversationHandler, MessageHandler, filters

from config import YOUR_CHAT_ID, logger, ADD_PLAN_USER, ADD_PLAN_DATE, ADD_PLAN_CONTENT
from database import get_db_connection, save_user_plan_to_db
from services.google_sheets import save_daily_plan_to_sheets, parse_structured_plan

# –û—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
logger = logging.getLogger(__name__)

async def admin_add_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìã –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ì–û –ü–õ–ê–ù–ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )
    return ADD_PLAN_USER

async def add_plan_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        user_id = int(update.message.text)
        context.user_data['plan_user_id'] = user_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê–°–ò–ù–•–†–û–ù–ù–û)
        try:
            async with get_db_connection() as conn:
                user_info = await conn.fetchrow(
                    "SELECT first_name FROM clients WHERE user_id = $1", 
                    user_id
                )
                if not user_info:
                    await update.message.reply_text(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                    )
                    return ADD_PLAN_USER
                
                context.user_data['user_name'] = user_info['first_name']
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return ADD_PLAN_USER
        
        await update.message.reply_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} (ID: {user_id})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î):"
        )
        return ADD_PLAN_DATE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
        )
        return ADD_PLAN_USER

async def add_plan_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    date_str = update.message.text
    
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        context.user_data['plan_date'] = date_str
        
        await update.message.reply_text(
            f"üìÖ –î–∞—Ç–∞: {date_str}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–ª–∞–Ω–∞.\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
            "- –ó–∞–¥–∞—á–∞ 1\n"
            "- –ó–∞–¥–∞—á–∞ 2\n"
            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
            "- –°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
            "–°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
            "- –í–∞—à —Å–æ–≤–µ—Ç"
        )
        return ADD_PLAN_CONTENT
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADD_PLAN_DATE

async def add_plan_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
    plan_content = update.message.text
    user_id = context.user_data['plan_user_id']
    date_str = context.user_data['plan_date']
    user_name = context.user_data['user_name']
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    plan_data = parse_structured_plan(plan_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    success = save_daily_plan_to_sheets(user_id, date_str, plan_data)
    
    if success:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL (–ê–°–ò–ù–•–†–û–ù–ù–û)
        await save_user_plan_to_db(user_id, {
            'plan_date': date_str,
            'task1': plan_data.get('strategic_tasks', [''])[0] if plan_data.get('strategic_tasks') else '',
            'task2': plan_data.get('strategic_tasks', [''])[1] if len(plan_data.get('strategic_tasks', [])) > 1 else '',
            'task3': plan_data.get('strategic_tasks', [''])[2] if len(plan_data.get('strategic_tasks', [])) > 2 else '',
            'task4': plan_data.get('critical_tasks', [''])[0] if plan_data.get('critical_tasks') else '',
            'advice': plan_data.get('advice', [''])[0] if plan_data.get('advice') else ''
        })
        
        await update.message.reply_text(
            f"‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üìã –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets"
        )
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ {date_str}!\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ."
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets."
        )
    
    return ConversationHandler.END

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        async with get_db_connection() as conn:
            total_users = await conn.fetchval("SELECT COUNT(*) FROM clients")
            active_today = await conn.fetchval(
                "SELECT COUNT(*) FROM clients WHERE DATE(last_activity) = CURRENT_DATE"
            )
            total_messages = await conn.fetchval(
                "SELECT COUNT(*) FROM user_messages WHERE direction = 'incoming'"
            )
            total_answers = await conn.fetchval("SELECT COUNT(*) FROM questionnaire_answers")
            total_plans = await conn.fetchval("SELECT COUNT(*) FROM user_plans")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        total_users = active_today = total_messages = total_answers = total_plans = 0
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
    stats_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
    stats_text += f"üìù –û—Ç–≤–µ—Ç–æ–≤ –≤ –∞–Ω–∫–µ—Ç–∞—Ö: {total_answers}\n"
    stats_text += f"üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {total_plans}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets
    from services.google_sheets import google_sheet
    if google_sheet:
        stats_text += f"üìä Google Sheets: ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
    else:
        stats_text += f"üìä Google Sheets: ‚ùå –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    await update.message.reply_text(stats_text)

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)"""
    if str(update.effective_user.id) != YOUR_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        async with get_db_connection() as conn:
            users = await conn.fetch(
                "SELECT user_id, username, first_name, last_activity FROM clients ORDER BY last_activity DESC LIMIT 20"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users = []
    
    if not users:
        await update.message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    users_text = "üë• –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
    
    for user in users:
        user_id = user['user_id']
        username = user['username']
        first_name = user['first_name']
        last_activity = user['last_activity']
        
        username_display = f"@{username}" if username else "–±–µ–∑ username"
        users_text += f"üÜî {user_id} - {first_name} ({username_display})\n"
        users_text += f"   üìÖ –ê–∫—Ç–∏–≤–µ–Ω: {last_activity}\n\n"
    
    users_text += "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_plan"
    
    await update.message.reply_text(users_text)

async def button_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data.startswith('reply_'):
        user_id = callback_data.replace('reply_', '')
        await query.edit_message_text(f"‚úçÔ∏è –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send {user_id} <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
    
    elif callback_data.startswith('view_questionnaire_'):
        user_id = callback_data.replace('view_questionnaire_', '')
        await query.edit_message_text(f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    
    elif callback_data.startswith('stats_'):
        user_id = callback_data.replace('stats_', '')
        await query.edit_message_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    
    elif callback_data.startswith('create_plan_'):
        user_id = callback_data.replace('create_plan_', '')
        await query.edit_message_text(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_plan")

async def save_user_plan_to_db(user_id: int, plan_data: dict):
    """–ê–°–ò–ù–•–†–û–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL"""
    try:
        async with get_db_connection() as conn:
            await conn.execute('''
                INSERT INTO user_plans (user_id, plan_date, task1, task2, task3, task4, advice, status, created_date)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            ''', user_id, plan_data['plan_date'], plan_data['task1'], plan_data['task2'],
               plan_data['task3'], plan_data['task4'], plan_data['advice'], 'active', datetime.now())
            
            logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ {user_id}: {e}")
