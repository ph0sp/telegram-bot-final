import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackContext

from config import logger
from database import update_user_activity, save_message

logger = logging.getLogger(__name__)

async def handle_all_messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    message_text = update.message.text

    if context.user_data.get('questionnaire_started'):
        logger.info(f"üîá –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã: {message_text}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:
    current_question = context.user_data.get('current_question', -2)
    has_assistant_data = context.user_data.get('assistant_gender') or context.user_data.get('assistant_name')
    questionnaire_started = context.user_data.get('questionnaire_started', False)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –õ–Æ–ë–û–ú –∏–∑ —ç—Ç–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–Ω–∫–µ—Ç—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_question >= -1 or has_assistant_data or questionnaire_started:
        logger.info(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã (–≤–æ–ø—Ä–æ—Å {current_question}): {message_text}")
        return
    
    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –∞–Ω–∫–µ—Ç–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    save_message(user_id, message_text, 'incoming')
    update_user_activity(user_id)

    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    if any(word in message_text.lower() for word in ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π', '–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ']):
        from handlers.reminder import handle_reminder_nlp
        await handle_reminder_nlp(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    button_handlers = {
        'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å': 'progress_command',
        'üë§ –ü—Ä–æ—Ñ–∏–ª—å': 'profile_command',
        'üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': 'plan_command',
        'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': 'my_reminders_command',
        '‚ÑπÔ∏è –ü–æ–º–æ—â—å': 'help_command',
        'üéÆ –û—á–∫–∏ –æ–ø—ã—Ç–∞': 'points_info_command'
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
    normalized_text = message_text.lower().strip()
    for button_text, handler_name in button_handlers.items():
        if button_text.lower() == normalized_text:
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: {button_text}")
            
            if handler_name == 'progress_command':
                from handlers.user import progress_command
                await progress_command(update, context)
            elif handler_name == 'profile_command':
                from handlers.user import profile_command
                await profile_command(update, context)
            elif handler_name == 'plan_command':
                from handlers.user import plan_command
                await plan_command(update, context)
            elif handler_name == 'my_reminders_command':
                from handlers.reminder import my_reminders_command
                await my_reminders_command(update, context)
            elif handler_name == 'help_command':
                from handlers.user import help_command
                await help_command(update, context)
            elif handler_name == 'points_info_command':
                from handlers.user import points_info_command
                await points_info_command(update, context)
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await update.message.reply_text(
        "ü§ñ –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"  
        "‚Ä¢ /plan - –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ /progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ /help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
    )

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    error = context.error

    ignore_errors = [
        "terminated by other getUpdates request",
        "Conflict", 
        "ConnectionError",
        "Timed out",
        "RetryAfter",
        "Restarting",
        "Connection lost",
        "Connection aborted",
        "Read timed out",
        "Bad Request",
        "Forbidden",
        "Not Found",
        "Unauthorized",
        "Chat not found"
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É
    for ignore in ignore_errors:
        if ignore in str(error):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: {error}")
            return

    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error}")
