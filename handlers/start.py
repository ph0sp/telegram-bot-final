import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext

from config import QUESTIONS, YOUR_CHAT_ID, logger
from database import (
    save_user_info, update_user_activity, check_user_registered,
    save_questionnaire_answer, save_message, get_db_connection
)
from services.google_sheets import save_client_to_sheets

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    
    save_user_info(user_id, user.username, user.first_name, user.last_name)
    update_user_activity(user_id)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM questionnaire_answers WHERE user_id = %s", 
                (user_id,)
            )
            conn.commit()
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
    keyboard = [['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
        reply_markup=reply_markup
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    context.user_data['current_question'] = 0
    context.user_data['answers'] = {}
    
    return 0  # GENDER

async def gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    gender = update.message.text.replace('üë® ', '').replace('üë© ', '')
    context.user_data['assistant_gender'] = gender
    
    if gender == '–ú—É–∂—Å–∫–æ–π':
        assistant_name = '–ê–Ω—Ç–æ–Ω'
    else:
        assistant_name = '–í–∞–ª–µ—Ä–∏—è'
    
    context.user_data['assistant_name'] = assistant_name
    
    # –ü–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–∫ –±—ã–ª–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    await update.message.reply_text(
        f'üßå –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {assistant_name}. –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n'
        f'–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –ø–æ–º–æ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –¥–µ–Ω—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.\n\n'
        f'–Ø —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –≤–∞—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü, –∞ –∑–∞—Ç–µ–º –º—ã –±—É–¥–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, '
        f'—á—Ç–æ–±—ã –≤—ã –¥–≤–∏–≥–∞–ª–∏—Å—å –∫ —Ü–µ–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π –æ –≥–ª–∞–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö: —Å–Ω–µ, —Å–ø–æ—Ä—Ç–µ –∏ –ø–∏—Ç–∞–Ω–∏–∏.\n\n'
        f'–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à —Ä–∏—Ç–º –∂–∏–∑–Ω–∏ –∏ —Ü–µ–ª–∏. '
        f'–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 25-30 –º–∏–Ω—É—Ç. –ù–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –º–µ—Å—è—Ü, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n\n'
        f'–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?',
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    return 1  # CONFIRM_START

async def confirm_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–ï–†–í–´–ô –≤–æ–ø—Ä–æ—Å
    await update.message.reply_text(QUESTIONS[0])
    return 2  # QUESTIONS

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã"""
    user_id = update.effective_user.id
    answer_text = update.message.text
    current_question = context.user_data['current_question']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    save_questionnaire_answer(user_id, current_question, QUESTIONS[current_question], answer_text)
    context.user_data['answers'][current_question] = answer_text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['current_question'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if context.user_data['current_question'] < len(QUESTIONS):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–õ–ï–î–£–Æ–©–ò–ô –≤–æ–ø—Ä–æ—Å
        await update.message.reply_text(QUESTIONS[context.user_data['current_question']])
        return 2  # QUESTIONS
    else:
        # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        return await finish_questionnaire(update, context)

async def finish_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    user = update.effective_user
    assistant_name = context.user_data['assistant_name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ Google Sheets
    user_data = {
        'user_id': user.id,
        'telegram_username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'start_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'main_goal': context.user_data['answers'].get(0, ''),
        'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        '—Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å': '–ù–æ–≤–∏—á–æ–∫',
        '–æ—á–∫–∏_–æ–ø—ã—Ç–∞': '0',
        '—Ç–µ–∫—É—â–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '0',
        '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Å–µ—Ä–∏—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': '0',
        '–ª—é–±–∏–º—ã–π_—Ä–∏—Ç—É–∞–ª': '',
        '–¥–∞—Ç–∞_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–∞': datetime.now().strftime("%Y-%m-%d"),
        '–±–ª–∏–∂–∞–π—à–∞—è_—Ü–µ–ª—å': '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    }
    
    save_client_to_sheets(user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    questionnaire = f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
    questionnaire += f"üë§ ID: {user.id}\n"
    questionnaire += f"üìõ –ò–º—è: {user.first_name}\n"
    if user.last_name:
        questionnaire += f"üìõ –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
    if user.username:
        questionnaire += f"üîó Username: @{user.username}\n"
    questionnaire += f"üìÖ –î–∞—Ç–∞: {update.message.date.strftime('%Y-%m-%d %H:%M')}\n"
    questionnaire += f"üë®‚Äçüíº –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_name}\n\n"
    
    questionnaire += "üìù –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    
    for i, question in enumerate(QUESTIONS):
        answer = context.user_data['answers'].get(i, '‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
        questionnaire += f"‚ùì {i+1}. {question}:\n"
        questionnaire += f"üí¨ {answer}\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    max_length = 4096
    if len(questionnaire) > max_length:
        parts = [questionnaire[i:i+max_length] for i in range(0, len(questionnaire), max_length)]
        for part in parts:
            try:
                await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=part)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
    else:
        try:
            await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=questionnaire)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—É
    try:
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{user.id}")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"view_questionnaire_{user.id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"stats_{user.id}")],
            [InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data=f"create_plan_{user.id}")]
        ])
        
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID, 
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∫–µ—Ç—É!",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        ['üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üéÆ –û—á–∫–∏ –æ–ø—ã—Ç–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n"
        "‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç –¥–ª—è –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.\n\n"
        "üîî –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É!\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –¥—É—à'\n"
        "'–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    await update.message.reply_text(
        '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
