import logging
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, CallbackContext

from config import logger
from database import (
    update_user_activity, add_reminder_to_db, get_user_reminders, 
    delete_reminder_from_db, get_db_connection
)

logger = logging.getLogger(__name__)

async def remind_me_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    await update_user_activity(user_id)
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "/remind_me <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/remind_me 20:30 –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\n"
            "/remind_me 9 —É—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É\n"
            "/remind_me 11 –≤–µ—á–µ—Ä–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫\n"
            "/remind_me –≤–µ—á–µ—Ä–æ–º –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä\n\n"
            "‚è±Ô∏è –í—Ä–µ–º—è –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n"
            "‚Ä¢ 20:30, 09:00\n"
            "‚Ä¢ 9 —É—Ç—Ä–∞, 7 –≤–µ—á–µ—Ä–∞, 11 –Ω–æ—á–∏\n"
            "‚Ä¢ 11 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞, 3 —á–∞—Å–∞ –¥–Ω—è\n"
            "‚Ä¢ —É—Ç—Ä–æ–º, –¥–Ω–µ–º, –≤–µ—á–µ—Ä–æ–º, –Ω–æ—á—å—é"
        )
        return
    
    time_str = context.args[0]
    reminder_text = " ".join(context.args[1:])
    
    logger.info(f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {time_str} - {reminder_text}")
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    time_data = parse_time_input(time_str)
    
    if not time_data:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 20:30 –∏–ª–∏ 09:00\n"
            "‚Ä¢ 9 —É—Ç—Ä–∞ –∏–ª–∏ 7 –≤–µ—á–µ—Ä–∞\n"
            "‚Ä¢ 11 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞\n"
            "‚Ä¢ —É—Ç—Ä–æ–º, –¥–Ω–µ–º, –≤–µ—á–µ—Ä–æ–º"
        )
        return
    
    reminder_data = {
        'type': 'once',
        'time': time_data['time'],
        'text': reminder_text,
        'days': []
    }
    
    success = await add_reminder_to_db(user_id, reminder_data)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_data['time']}:\n"
            f"üìù {reminder_text}\n\n"
            f"–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

async def regular_remind_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    await update_user_activity(user_id)
    
    if not context.args or len(context.args) < 3:
        await update.message.reply_text(
            "üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "/regular_remind <–≤—Ä–µ–º—è> <–¥–Ω–∏> <—Ç–µ–∫—Å—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/regular_remind 08:00 –ø–Ω,—Å—Ä,–ø—Ç —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞\n"
            "/regular_remind 09:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã\n"
            "/regular_remind 20:00 –≤—Ç,—á—Ç –π–æ–≥–∞\n\n"
            "üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏:\n"
            "–ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å\n"
            "–∏–ª–∏ '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π"
        )
        return
    
    time_str = context.args[0]
    days_str = context.args[1]
    reminder_text = " ".join(context.args[2:])
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    time_data = parse_time_input(time_str)
    
    if not time_data:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_map = {
        '–ø–Ω': '–ø–Ω', '–≤—Ç': '–≤—Ç', '—Å—Ä': '—Å—Ä', '—á—Ç': '—á—Ç',
        '–ø—Ç': '–ø—Ç', '—Å–±': '—Å–±', '–≤—Å': '–≤—Å',
        '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ': ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'],
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–Ω', '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç', '—Å—Ä–µ–¥–∞': '—Å—Ä', '—á–µ—Ç–≤–µ—Ä–≥': '—á—Ç',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—Ç', '—Å—É–±–±–æ—Ç–∞': '—Å–±', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–≤—Å'
    }
    
    if days_str.lower() == '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ':
        days = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
    else:
        days = []
        for day_part in days_str.split(','):
            day_clean = day_part.strip().lower()
            if day_clean in days_map:
                if isinstance(days_map[day_clean], list):
                    days.extend(days_map[day_clean])
                else:
                    days.append(days_map[day_clean])
    
    if not days:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–Ω,—Å—Ä,–ø—Ç –∏–ª–∏ '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'"
        )
        return
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    days = list(set(days))
    
    reminder_data = {
        'type': 'regular',
        'time': time_data['time'],
        'text': reminder_text,
        'days': days
    }
    
    success = await add_reminder_to_db(user_id, reminder_data)
    
    if success:
        days_display = ', '.join(days) if days != ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'] else '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n"
            f"‚è∞ {time_data['time']} {days_display}\n"
            f"üìù {reminder_text}\n\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

async def my_reminders_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    await update_user_activity(user_id)
    
    reminders = await get_user_reminders(user_id)
    
    if not reminders:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            "üí° –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /remind_me –∏–ª–∏ /regular_remind\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n"
            "  '–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫'\n"
            "  '–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
        )
        return
    
    reminders_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    
    for i, reminder in enumerate(reminders, 1):
        type_icon = "üîÑ" if reminder['type'] == 'regular' else "‚è∞"
        days_info = f" ({reminder['days']})" if reminder['type'] == 'regular' else ""
        
        reminders_text += f"{i}. {type_icon} {reminder['time']}{days_info}\n"
        reminders_text += f"   üìù {reminder['text']}\n"
        reminders_text += f"   üÜî ID: {reminder['id']}\n\n"
    
    reminders_text += "‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n/delete_remind <ID>"
    
    await update.message.reply_text(reminders_text)

async def delete_remind_command(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
    await update_user_activity(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "/delete_remind <ID>\n\n"
            "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
            "/my_reminders"
        )
        return
    
    try:
        reminder_id = int(context.args[0])
        success = await delete_reminder_from_db(reminder_id)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ!\n\n"
                f"üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
                f"/my_reminders"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID."
            )
        
    except ValueError:
        await update.message.reply_text("‚ùå ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def handle_reminder_nlp(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    message_text = update.message.text
    await update_user_activity(user_id)
    
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {message_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 20 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    reminders = await get_user_reminders(user_id)
    if len(reminders) >= 20:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (20).\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: /my_reminders"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_data = parse_reminder_text(message_text)
    
    if not reminder_data:
        await update.message.reply_text(
            "‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫:\n"
            "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –∫—É–ø–∞–ª—å–Ω–∏–∫'\n"
            "'–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'\n"
            "'–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É'\n"
            "'–Ω–∞–ø–æ–º–Ω–∏ –≤ 11 –≤–µ—á–µ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É
    success = await add_reminder_to_db(user_id, reminder_data)
    
    if success:
        if reminder_data['type'] == 'regular':
            days_display = ', '.join(reminder_data['days']) if reminder_data['days'] != ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'] else '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
            response = (
                f"‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"‚è∞ {reminder_data['time']} {days_display}\n"
                f"üìù {reminder_data['text']}\n\n"
                f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
            )
        else:
            response = (
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"‚è∞ {reminder_data['time']}\n"
                f"üìù {reminder_data['text']}\n\n"
                f"–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            )
        
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

async def send_reminder_job(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        now = datetime.now()
        current_time = now.strftime("%H:%M")
        current_day_rus = now.strftime("%A").lower()
        day_translation = {
            'monday': '–ø–Ω', 'tuesday': '–≤—Ç', 'wednesday': '—Å—Ä',
            'thursday': '—á—Ç', 'friday': '–ø—Ç', 'saturday': '—Å–±', 'sunday': '–≤—Å'
        }
        current_day = day_translation.get(current_day_rus, '–ø–Ω')
        
        async with get_db_connection() as conn:
            # –ò—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            reminders = await conn.fetch('''
                SELECT ur.id, ur.user_id, ur.reminder_text, c.first_name, ur.reminder_type
                FROM user_reminders ur 
                JOIN clients c ON ur.user_id = c.user_id 
                WHERE ur.is_active = TRUE AND ur.reminder_time = $1 
                AND (ur.days_of_week LIKE $2 OR ur.days_of_week = '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' OR ur.days_of_week = '')
            ''', current_time, f'%{current_day}%')
            
            for reminder in reminders:
                reminder_id = reminder['id']
                user_id = reminder['user_id']
                reminder_text = reminder['reminder_text']
                first_name = reminder['first_name']
                reminder_type = reminder['reminder_type']
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
                    )
                    logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
                    if reminder_type == 'once':
                        await conn.execute(
                            'UPDATE user_reminders SET is_active = FALSE WHERE id = $1',
                            reminder_id
                        )
                        logger.info(f"üìù –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_reminder_job: {e}")

def parse_time_input(time_text: str):
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏"""
    time_text = time_text.lower().strip()
    
    logger.info(f"üïí –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è: {time_text}")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    time_mapping = {
        '—É—Ç—Ä–æ–º': '08:00',
        '—É—Ç—Ä–æ': '08:00', 
        '—É—Ç—Ä–∞': '08:00',
        '–¥–Ω–µ–º': '13:00',
        '–¥–µ–Ω—å': '13:00',
        '–≤–µ—á–µ—Ä–æ–º': '20:00',
        '–≤–µ—á–µ—Ä': '20:00',
        '–Ω–æ—á—å—é': '22:00',
        '–Ω–æ—á—å': '22:00',
        '–≤ –æ–±–µ–¥': '13:00',
        '–ø–µ—Ä–µ–¥ —Å–Ω–æ–º': '22:00',
        '–ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã': '18:00',
        '–≤ –ø–æ–ª–¥–µ–Ω—å': '12:00'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º (14:30, 9:00)
    exact_time_match = re.search(r'(\d{1,2}):(\d{2})', time_text)
    if exact_time_match:
        hours = int(exact_time_match.group(1))
        minutes = int(exact_time_match.group(2))
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            time_str = f"{hours:02d}:{minutes:02d}"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
            return {'time': time_str, 'type': 'exact'}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "11 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞", "7 —É—Ç—Ä–∞", "3 –Ω–æ—á–∏"
    hour_time_match = re.search(r'(\d{1,2})\s*(?:—á–∞—Å\w*)?\s*(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏|–¥–Ω—è)', time_text)
    if hour_time_match:
        hour = int(hour_time_match.group(1))
        period = hour_time_match.group(2)
        
        if period == '—É—Ç—Ä–∞':
            if 1 <= hour <= 12:
                time_str = f"{hour:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è —É—Ç—Ä–∞: {time_str}")
                return {'time': time_str, 'type': '12h'}
        elif period == '–≤–µ—á–µ—Ä–∞':
            if 1 <= hour <= 11:
                time_str = f"{hour + 12:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–∞: {time_str}")
                return {'time': time_str, 'type': '12h'}
            elif hour == 12:
                time_str = "12:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–∞: {time_str}")
                return {'time': time_str, 'type': '12h'}
        elif period == '–Ω–æ—á–∏':
            if 1 <= hour <= 11:
                time_str = f"{hour + 12:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –Ω–æ—á–∏: {time_str}")
                return {'time': time_str, 'type': '12h'}
            elif hour == 12:
                time_str = "00:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –Ω–æ—á–∏: {time_str}")
                return {'time': time_str, 'type': '12h'}
        elif period == '–¥–Ω—è':
            if 1 <= hour <= 11:
                time_str = f"{hour + 12:02d}:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –¥–Ω—è: {time_str}")
                return {'time': time_str, 'type': '12h'}
            elif hour == 12:
                time_str = "12:00"
                logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –¥–Ω—è: {time_str}")
                return {'time': time_str, 'type': '12h'}
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã "11 –≤–µ—á–µ—Ä–∞", "7 —É—Ç—Ä–∞" (–±–µ–∑ —Å–ª–æ–≤–∞ "—á–∞—Å")
    simple_time_match = re.search(r'(\d{1,2})\s+(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏)', time_text)
    if simple_time_match:
        hour = int(simple_time_match.group(1))
        period = simple_time_match.group(2)
        
        if period == '—É—Ç—Ä–∞' and 1 <= hour <= 12:
            time_str = f"{hour:02d}:00"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è —É—Ç—Ä–∞: {time_str}")
            return {'time': time_str, 'type': 'simple'}
        elif period == '–≤–µ—á–µ—Ä–∞' and 1 <= hour <= 11:
            time_str = f"{hour + 12:02d}:00"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–∞: {time_str}")
            return {'time': time_str, 'type': 'simple'}
        elif period == '–Ω–æ—á–∏' and 1 <= hour <= 11:
            time_str = f"{hour + 12:02d}:00"
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è –Ω–æ—á–∏: {time_str}")
            return {'time': time_str, 'type': 'simple'}
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—É—Ç—Ä–æ–º, –≤–µ—á–µ—Ä–æ–º –∏ —Ç.–¥.)
    if time_text in time_mapping:
        time_str = time_mapping[time_text]
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
        return {'time': time_str, 'type': 'relative'}
    
    # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ "—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç"
    future_match = re.search(r'—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)', time_text)
    if future_match:
        amount = int(future_match.group(1))
        unit = future_match.group(2)
        
        now = datetime.now()
        if '—á–∞—Å' in unit:
            future_time = now + timedelta(hours=amount)
        else:
            future_time = now + timedelta(minutes=amount)
        
        time_str = future_time.strftime("%H:%M")
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è: {time_str} (—á–µ—Ä–µ–∑ {amount} {unit})")
        
        return {
            'time': time_str, 
            'type': 'future_relative',
            'delay_minutes': amount * (60 if '—á–∞—Å' in unit else 1),
            'original_text': time_text
        }
    
    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è: {time_text}")
    return None

def parse_reminder_text(text: str):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    original_text = text
    text_lower = text.lower()
    
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {text}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_type = detect_reminder_type(text_lower)
    logger.info(f"üìù –¢–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_type}")
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –¥–ª—è "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç" –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if re.search(r'—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)', text_lower):
        reminder_type = 'once'
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø 'once' –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—ã")
    
    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    clean_text = text_lower
    
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_words = ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π', '–º–Ω–µ']
    for word in reminder_words:
        clean_text = re.sub(r'\b' + re.escape(word) + r'\b', '', clean_text)
    
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
    if reminder_type == 'once':
        regular_words = ['–∫–∞–∂–¥—ã–π', '–∫–∞–∂–¥–æ–µ', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '–∫–∞–∂–¥—É—é']
        for word in regular_words:
            clean_text = re.sub(r'\b' + re.escape(word) + r'\b', '', clean_text)
    
    clean_text = clean_text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    time_data = parse_time_input(clean_text)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    if not time_data:
        time_data = parse_time_input(original_text)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not time_data:
        time_data = {'time': '09:00', 'type': 'default'}
        logger.warning("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 09:00")
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ time_data –≤ reminder_data
    reminder_data = {
        'type': reminder_type,
        'time': time_data['time'],
        'text': '',
        'days': [],
        'original_text': original_text
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ time_data
    if 'delay_minutes' in time_data:
        reminder_data['delay_minutes'] = time_data['delay_minutes']
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ)
    if reminder_type == 'regular' and 'delay_minutes' not in time_data:
        days_map = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–Ω', '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç', '—Å—Ä–µ–¥–∞': '—Å—Ä', '—Å—Ä–µ–¥—É': '—Å—Ä',
            '—á–µ—Ç–≤–µ—Ä–≥': '—á—Ç', '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—Ç', '–ø—è—Ç–Ω–∏—Ü—É': '–ø—Ç', 
            '—Å—É–±–±–æ—Ç–∞': '—Å–±', '—Å—É–±–±–æ—Ç—É': '—Å–±', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–≤—Å',
            '–ø–Ω': '–ø–Ω', '–≤—Ç': '–≤—Ç', '—Å—Ä': '—Å—Ä', '—á—Ç': '—á—Ç', '–ø—Ç': '–ø—Ç', '—Å–±': '—Å–±', '–≤—Å': '–≤—Å'
        }
        
        for day_full, day_short in days_map.items():
            if day_full in text_lower:
                reminder_data['days'].append(day_short)
                # –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å –∏–∑ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                clean_text = re.sub(r'\b' + re.escape(day_full) + r'\b', '', clean_text)
        
        # –ï—Å–ª–∏ –¥–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –Ω–æ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –∑–Ω–∞—á–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        if not reminder_data['days'] and reminder_type == 'regular':
            reminder_data['days'] = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
            logger.info("üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    reminder_text = re.sub(r'\s+', ' ', clean_text).strip()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤
    if not reminder_text:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        temp_text = text_lower
        for word in ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π', '–º–Ω–µ']:
            temp_text = re.sub(r'\b' + re.escape(word) + r'\b', '', temp_text)
        reminder_text = re.sub(r'\s+', ' ', temp_text).strip()
    
    reminder_data['text'] = reminder_text
    
    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: –≤—Ä–µ–º—è={reminder_data['time']}, —Ç–µ–∫—Å—Ç={reminder_text}, —Ç–∏–ø={reminder_type}, –¥–Ω–∏={reminder_data['days']}")
    
    return reminder_data

def detect_reminder_type(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É"""
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞)
    regular_keywords = [
        '–∫–∞–∂–¥—ã–π', '–∫–∞–∂–¥–æ–µ', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '–∫–∞–∂–¥—É—é', 
        '–Ω–∞–ø–æ–º–∏–Ω–∞–π'  # "–Ω–∞–ø–æ–º–∏–Ω–∞–π" - –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö
    ]
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_keywords = [
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    for keyword in regular_keywords:
        # –ò—â–µ–º —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞
        if re.search(r'\b' + re.escape(keyword) + r'\b', text_lower):
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {keyword}")
            return 'regular'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    for day in days_keywords:
        if day in text_lower:
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day}")
            return 'regular'
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ - —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    logger.info("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    return 'once'

def schedule_reminders(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        job_queue = application.job_queue
        if job_queue:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            job_queue.run_repeating(
                callback=send_reminder_job,
                interval=60,  # 60 —Å–µ–∫—É–Ω–¥
                first=10,     # –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                name="reminder_checker"
            )
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–Ω–∏ —Ç–∞–∫–∂–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º)
async def send_morning_plan(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)"""
    from services.google_sheets import get_daily_plan_from_sheets
    
    try:
        async with get_db_connection() as conn:
            users = await conn.fetch(
                "SELECT user_id, first_name, username FROM clients WHERE status = 'active'"
            )
            
            for user in users:
                user_id = user['user_id']
                first_name = user['first_name']
                today = datetime.now().strftime("%Y-%m-%d")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ Google Sheets
                plan_data = get_daily_plan_from_sheets(user_id, today)
                
                if plan_data:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name}!\n\n"
                    message += "üìã –í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                    
                    if plan_data.get('strategic_tasks'):
                        message += "üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n"
                        for task in plan_data['strategic_tasks']:
                            message += f"‚Ä¢ {task}\n"
                        message += "\n"
                    
                    if plan_data.get('critical_tasks'):
                        message += "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
                        for task in plan_data['critical_tasks']:
                            message += f"‚Ä¢ {task}\n"
                        message += "\n"
                    
                    if plan_data.get('priorities'):
                        message += "üéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –î–ù–Ø:\n"
                        for priority in plan_data['priorities']:
                            message += f"‚Ä¢ {priority}\n"
                        message += "\n"
                    
                    if plan_data.get('advice'):
                        message += "üí° –°–û–í–ï–¢–´ –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n"
                        for advice in plan_data['advice']:
                            message += f"‚Ä¢ {advice}\n"
                        message += "\n"
                    
                    if plan_data.get('motivation_quote'):
                        message += f"üí´ –ú–û–¢–ò–í–ê–¶–ò–Ø: {plan_data['motivation_quote']}\n\n"
                    
                    message += "üí™ –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!"
                    
                    try:
                        await context.bot.send_message(chat_id=user_id, text=message)
                        logger.info(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_morning_plan: {e}")

async def send_evening_survey(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)"""
    try:
        async with get_db_connection() as conn:
            users = await conn.fetch(
                "SELECT user_id, first_name FROM clients WHERE status = 'active'"
            )
            
            for user in users:
                user_id = user['user_id']
                first_name = user['first_name']
                
                message = (
                    f"üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {first_name}!\n\n"
                    "üìä –ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?\n\n"
                    "1. üéØ –í—ã–ø–æ–ª–Ω–∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏? (–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                    "2. üåÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã? (–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                    "3. üåô –í—ã–ø–æ–ª–Ω–∏–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã? (–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                    "4. üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10?\n"
                    "5. ‚ö° –≠–Ω–µ—Ä–≥–∏—è –æ—Ç 1 –¥–æ 10?\n"
                    "6. üéØ –£—Ä–æ–≤–µ–Ω—å —Ñ–æ–∫—É—Å–∞ –æ—Ç 1 –¥–æ 10?\n"
                    "7. üî• –£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç 1 –¥–æ 10?\n"
                    "8. üèÜ –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è?\n"
                    "9. üöß –ë—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è?\n"
                    "10. üåü –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ?\n"
                    "11. üìà –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
                    "12. üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?\n"
                    "13. üíß –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª–∏? (—Å—Ç–∞–∫–∞–Ω–æ–≤)\n\n"
                )
                
                try:
                    await context.bot.send_message(chat_id=user_id, text=message)
                    logger.info(f"‚úÖ –í–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_evening_survey: {e}")
