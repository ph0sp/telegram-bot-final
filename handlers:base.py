import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackContext

from config import logger
from database import update_user_activity, save_message

logger = logging.getLogger(__name__)

async def handle_all_messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    message_text = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    save_message(user_id, message_text, 'incoming')
    update_user_activity(user_id)

    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    if any(word in message_text.lower() for word in ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–π']):
        from handlers.reminder import handle_reminder_nlp
        await handle_reminder_nlp(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    button_handlers = {
        'üìä –ø—Ä–æ–≥—Ä–µ—Å—Å': 'progress_command',
        'üë§ –ø—Ä–æ—Ñ–∏–ª—å': 'profile_command',
        'üìã –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': 'plan_command',
        'üîî –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': 'my_reminders_command',
        '‚ÑπÔ∏è –ø–æ–º–æ—â—å': 'help_command',
        'üéÆ –æ—á–∫–∏ –æ–ø—ã—Ç–∞': 'points_info_command',
        'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å': 'progress_command',
        'üë§ –ü—Ä–æ—Ñ–∏–ª—å': 'profile_command', 
        'üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': 'plan_command',
        'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': 'my_reminders_command',
        '‚ÑπÔ∏è –ü–æ–º–æ—â—å': 'help_command',
        'üéÆ –û—á–∫–∏ –æ–ø—ã—Ç–∞': 'points_info_command'
    }

    if message_text.lower() in [key.lower() for key in button_handlers.keys()]:
        # –ù–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        for key, handler_name in button_handlers.items():
            if key.lower() == message_text.lower():
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ–º
                if handler_name == 'progress_command':
                    from handlers.user import progress_command
                    await progress_command(update, context)
                elif handler_name == 'profile_command':
                    from handlers.user import profile_command
                    await profile_command(update, context)
                elif handler_name == 'plan_command':
                    from handlers.user import plan_command
                    await plan_command(update, context)
                elif handler_name == 'my_reminders_command':
                    from handlers.reminder import my_reminders_command
                    await my_reminders_command(update, context)
                elif handler_name == 'help_command':
                    from handlers.user import help_command
                    await help_command(update, context)
                elif handler_name == 'points_info_command':
                    from handlers.user import points_info_command
                    await points_info_command(update, context)
                return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await update.message.reply_text(
        "ü§ñ –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"  
        "‚Ä¢ /plan - –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ /progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ /help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
        "'–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –≤ 20:00 —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
    )

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    error = context.error

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∏ –Ω–µ–≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    ignore_errors = [
        "terminated by other getUpdates request",
        "Conflict", 
        "ConnectionError",
        "Timed out",
        "RetryAfter",
        "Restarting",
        "Connection lost",
        "Connection aborted",
        "Read timed out",
        "Bad Request",
        "Forbidden",
        "Not Found",
        "Unauthorized",
        "Chat not found"
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É
    for ignore in ignore_errors:
        if ignore in str(error):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: {error}")
            return

    # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error}")